
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cd0  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b84  08007b84  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08007b84  08007b84  00017b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b8c  08007b8c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b8c  08007b8c  00017b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08007b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200000cc  08007c60  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08007c60  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef8c  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d4  00000000  00000000  0002f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00031960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000327a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198bc  00000000  00000000  00033468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011916  00000000  00000000  0004cd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad62  00000000  00000000  0005e63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f939c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e4c  00000000  00000000  000f93ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000cc 	.word	0x200000cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e9c 	.word	0x08004e9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d0 	.word	0x200000d0
 80001dc:	08004e9c 	.word	0x08004e9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FlappyBird_init>:
 *      Author: Kirs
 */

#include "FlappyBird.h"

void FlappyBird_init(FlappyBird_t *buffer) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	memset(buffer->data, 0, sizeof(buffer->data));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	223c      	movs	r2, #60	; 0x3c
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fff8 	bl	8004598 <memset>
	buffer->index = 0;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <FlappyBird_update>:

int16_t FlappyBird_update(FlappyBird_t *buffer, int16_t adc_value) {
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	807b      	strh	r3, [r7, #2]
	int16_t max_value = buffer->data[0];
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	81fb      	strh	r3, [r7, #14]
	int8_t y0_bird_definition;
	uint8_t i;

	// Add the new value to the circular buffer
	buffer->data[buffer->index] = adc_value;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80005d0:	4619      	mov	r1, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	887a      	ldrh	r2, [r7, #2]
 80005d6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

	for (uint8_t i = 1; i < BUFFER_SIZE; i++) {
 80005da:	2301      	movs	r3, #1
 80005dc:	733b      	strb	r3, [r7, #12]
 80005de:	e00f      	b.n	8000600 <FlappyBird_update+0x48>
		if (buffer->data[i] > max_value) {
 80005e0:	7b3a      	ldrb	r2, [r7, #12]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80005e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	da04      	bge.n	80005fa <FlappyBird_update+0x42>
			max_value = buffer->data[i];
 80005f0:	7b3a      	ldrb	r2, [r7, #12]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80005f8:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 1; i < BUFFER_SIZE; i++) {
 80005fa:	7b3b      	ldrb	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	733b      	strb	r3, [r7, #12]
 8000600:	7b3b      	ldrb	r3, [r7, #12]
 8000602:	2b1d      	cmp	r3, #29
 8000604:	d9ec      	bls.n	80005e0 <FlappyBird_update+0x28>
		}
	}

	// Update the circular buffer index
	buffer->index = (buffer->index + 1) % BUFFER_SIZE;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	4b9b      	ldr	r3, [pc, #620]	; (800087c <FlappyBird_update+0x2c4>)
 8000610:	fb83 1302 	smull	r1, r3, r3, r2
 8000614:	4413      	add	r3, r2
 8000616:	1119      	asrs	r1, r3, #4
 8000618:	17d3      	asrs	r3, r2, #31
 800061a:	1ac9      	subs	r1, r1, r3
 800061c:	460b      	mov	r3, r1
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	1a5b      	subs	r3, r3, r1
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	1ad1      	subs	r1, r2, r3
 8000626:	b2ca      	uxtb	r2, r1
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c


	if (max_value < 300 && max_value > -300) {
 800062e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000632:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000636:	da07      	bge.n	8000648 <FlappyBird_update+0x90>
 8000638:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800063c:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8000640:	dd02      	ble.n	8000648 <FlappyBird_update+0x90>
			y0_bird_definition = 14;
 8000642:	230e      	movs	r3, #14
 8000644:	737b      	strb	r3, [r7, #13]
 8000646:	e110      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 300 && max_value < 420)
 8000648:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800064c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000650:	dd04      	ble.n	800065c <FlappyBird_update+0xa4>
 8000652:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000656:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800065a:	db09      	blt.n	8000670 <FlappyBird_update+0xb8>
				|| (max_value < -300 && max_value > -420)) {
 800065c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000660:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8000664:	da07      	bge.n	8000676 <FlappyBird_update+0xbe>
 8000666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800066a:	f513 7fd2 	cmn.w	r3, #420	; 0x1a4
 800066e:	dd02      	ble.n	8000676 <FlappyBird_update+0xbe>
			y0_bird_definition = 13;
 8000670:	230d      	movs	r3, #13
 8000672:	737b      	strb	r3, [r7, #13]
 8000674:	e0f9      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 300 && max_value < 420)
 8000676:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800067a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800067e:	dd04      	ble.n	800068a <FlappyBird_update+0xd2>
 8000680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000684:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8000688:	db09      	blt.n	800069e <FlappyBird_update+0xe6>
				|| (max_value < -300 && max_value > -420)) {
 800068a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800068e:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8000692:	da07      	bge.n	80006a4 <FlappyBird_update+0xec>
 8000694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000698:	f513 7fd2 	cmn.w	r3, #420	; 0x1a4
 800069c:	dd02      	ble.n	80006a4 <FlappyBird_update+0xec>
			y0_bird_definition = 12;}
 800069e:	230c      	movs	r3, #12
 80006a0:	737b      	strb	r3, [r7, #13]
 80006a2:	e0e2      	b.n	800086a <FlappyBird_update+0x2b2>
		else if ((max_value > 420 && max_value < 540)
 80006a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006a8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80006ac:	dd04      	ble.n	80006b8 <FlappyBird_update+0x100>
 80006ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006b2:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 80006b6:	db09      	blt.n	80006cc <FlappyBird_update+0x114>
				|| (max_value < -420 && max_value > -540)) {
 80006b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006bc:	f513 7fd2 	cmn.w	r3, #420	; 0x1a4
 80006c0:	da07      	bge.n	80006d2 <FlappyBird_update+0x11a>
 80006c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006c6:	f513 7f07 	cmn.w	r3, #540	; 0x21c
 80006ca:	dd02      	ble.n	80006d2 <FlappyBird_update+0x11a>
			y0_bird_definition = 11;
 80006cc:	230b      	movs	r3, #11
 80006ce:	737b      	strb	r3, [r7, #13]
 80006d0:	e0cb      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 540 && max_value < 660)
 80006d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006d6:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 80006da:	dd04      	ble.n	80006e6 <FlappyBird_update+0x12e>
 80006dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006e0:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80006e4:	db09      	blt.n	80006fa <FlappyBird_update+0x142>
				|| (max_value < -540 && max_value > -660)) {
 80006e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006ea:	f513 7f07 	cmn.w	r3, #540	; 0x21c
 80006ee:	da07      	bge.n	8000700 <FlappyBird_update+0x148>
 80006f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006f4:	f513 7f25 	cmn.w	r3, #660	; 0x294
 80006f8:	dd02      	ble.n	8000700 <FlappyBird_update+0x148>
			y0_bird_definition = 10;
 80006fa:	230a      	movs	r3, #10
 80006fc:	737b      	strb	r3, [r7, #13]
 80006fe:	e0b4      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 660 && max_value < 780)
 8000700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000704:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8000708:	dd04      	ble.n	8000714 <FlappyBird_update+0x15c>
 800070a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800070e:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 8000712:	db09      	blt.n	8000728 <FlappyBird_update+0x170>
				|| (max_value < -660 && max_value > -780)) {
 8000714:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000718:	f513 7f25 	cmn.w	r3, #660	; 0x294
 800071c:	da07      	bge.n	800072e <FlappyBird_update+0x176>
 800071e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000722:	f513 7f43 	cmn.w	r3, #780	; 0x30c
 8000726:	dd02      	ble.n	800072e <FlappyBird_update+0x176>
			y0_bird_definition = 9;
 8000728:	2309      	movs	r3, #9
 800072a:	737b      	strb	r3, [r7, #13]
 800072c:	e09d      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 780 && max_value < 900)
 800072e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000732:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 8000736:	dd04      	ble.n	8000742 <FlappyBird_update+0x18a>
 8000738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800073c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000740:	db09      	blt.n	8000756 <FlappyBird_update+0x19e>
				|| (max_value < -780 && max_value > -900)) {
 8000742:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000746:	f513 7f43 	cmn.w	r3, #780	; 0x30c
 800074a:	da07      	bge.n	800075c <FlappyBird_update+0x1a4>
 800074c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000750:	f513 7f61 	cmn.w	r3, #900	; 0x384
 8000754:	dd02      	ble.n	800075c <FlappyBird_update+0x1a4>
			y0_bird_definition = 8;
 8000756:	2308      	movs	r3, #8
 8000758:	737b      	strb	r3, [r7, #13]
 800075a:	e086      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 900 && max_value < 1020)
 800075c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000760:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000764:	dd04      	ble.n	8000770 <FlappyBird_update+0x1b8>
 8000766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800076a:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800076e:	db09      	blt.n	8000784 <FlappyBird_update+0x1cc>
				|| (max_value < -900 && max_value > -1020)) {
 8000770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000774:	f513 7f61 	cmn.w	r3, #900	; 0x384
 8000778:	da07      	bge.n	800078a <FlappyBird_update+0x1d2>
 800077a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800077e:	f513 7f7f 	cmn.w	r3, #1020	; 0x3fc
 8000782:	dd02      	ble.n	800078a <FlappyBird_update+0x1d2>
			y0_bird_definition = 7;
 8000784:	2307      	movs	r3, #7
 8000786:	737b      	strb	r3, [r7, #13]
 8000788:	e06f      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 1020 && max_value < 1140)
 800078a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800078e:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8000792:	dd05      	ble.n	80007a0 <FlappyBird_update+0x1e8>
 8000794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000798:	f240 4273 	movw	r2, #1139	; 0x473
 800079c:	4293      	cmp	r3, r2
 800079e:	dd09      	ble.n	80007b4 <FlappyBird_update+0x1fc>
				|| (max_value < -1020 && max_value > -1140)) {
 80007a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007a4:	f513 7f7f 	cmn.w	r3, #1020	; 0x3fc
 80007a8:	da07      	bge.n	80007ba <FlappyBird_update+0x202>
 80007aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007ae:	4a34      	ldr	r2, [pc, #208]	; (8000880 <FlappyBird_update+0x2c8>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	db02      	blt.n	80007ba <FlappyBird_update+0x202>
			y0_bird_definition = 6;
 80007b4:	2306      	movs	r3, #6
 80007b6:	737b      	strb	r3, [r7, #13]
 80007b8:	e057      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 1140 && max_value < 1260)
 80007ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007be:	f240 4274 	movw	r2, #1140	; 0x474
 80007c2:	4293      	cmp	r3, r2
 80007c4:	dd05      	ble.n	80007d2 <FlappyBird_update+0x21a>
 80007c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007ca:	f240 42eb 	movw	r2, #1259	; 0x4eb
 80007ce:	4293      	cmp	r3, r2
 80007d0:	dd09      	ble.n	80007e6 <FlappyBird_update+0x22e>
				|| (max_value < -1140 && max_value > -1260)) {
 80007d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007d6:	4a2b      	ldr	r2, [pc, #172]	; (8000884 <FlappyBird_update+0x2cc>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	da07      	bge.n	80007ec <FlappyBird_update+0x234>
 80007dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007e0:	4a29      	ldr	r2, [pc, #164]	; (8000888 <FlappyBird_update+0x2d0>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	db02      	blt.n	80007ec <FlappyBird_update+0x234>
			y0_bird_definition = 5;
 80007e6:	2305      	movs	r3, #5
 80007e8:	737b      	strb	r3, [r7, #13]
 80007ea:	e03e      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 1260 && max_value < 1380)
 80007ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007f0:	f240 42ec 	movw	r2, #1260	; 0x4ec
 80007f4:	4293      	cmp	r3, r2
 80007f6:	dd05      	ble.n	8000804 <FlappyBird_update+0x24c>
 80007f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007fc:	f240 5263 	movw	r2, #1379	; 0x563
 8000800:	4293      	cmp	r3, r2
 8000802:	dd09      	ble.n	8000818 <FlappyBird_update+0x260>
				|| (max_value < -1260 && max_value > -1380)) {
 8000804:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000808:	4a20      	ldr	r2, [pc, #128]	; (800088c <FlappyBird_update+0x2d4>)
 800080a:	4293      	cmp	r3, r2
 800080c:	da07      	bge.n	800081e <FlappyBird_update+0x266>
 800080e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <FlappyBird_update+0x2d8>)
 8000814:	4293      	cmp	r3, r2
 8000816:	db02      	blt.n	800081e <FlappyBird_update+0x266>
			y0_bird_definition = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	737b      	strb	r3, [r7, #13]
 800081c:	e025      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 1380 && max_value < 1500)
 800081e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000822:	f240 5264 	movw	r2, #1380	; 0x564
 8000826:	4293      	cmp	r3, r2
 8000828:	dd05      	ble.n	8000836 <FlappyBird_update+0x27e>
 800082a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800082e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000832:	4293      	cmp	r3, r2
 8000834:	dd09      	ble.n	800084a <FlappyBird_update+0x292>
				|| (max_value < -1380 && max_value > -1500)) {
 8000836:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <FlappyBird_update+0x2dc>)
 800083c:	4293      	cmp	r3, r2
 800083e:	da07      	bge.n	8000850 <FlappyBird_update+0x298>
 8000840:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <FlappyBird_update+0x2e0>)
 8000846:	4293      	cmp	r3, r2
 8000848:	db02      	blt.n	8000850 <FlappyBird_update+0x298>
			y0_bird_definition = 3;
 800084a:	2303      	movs	r3, #3
 800084c:	737b      	strb	r3, [r7, #13]
 800084e:	e00c      	b.n	800086a <FlappyBird_update+0x2b2>
		} else if ((max_value > 1500) || (max_value < -1500)) {
 8000850:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000854:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000858:	4293      	cmp	r3, r2
 800085a:	dc04      	bgt.n	8000866 <FlappyBird_update+0x2ae>
 800085c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <FlappyBird_update+0x2e4>)
 8000862:	4293      	cmp	r3, r2
 8000864:	da01      	bge.n	800086a <FlappyBird_update+0x2b2>
			y0_bird_definition = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	737b      	strb	r3, [r7, #13]
		}

	return y0_bird_definition;
 800086a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800086e:	b21b      	sxth	r3, r3
}
 8000870:	4618      	mov	r0, r3
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	88888889 	.word	0x88888889
 8000880:	fffffb8d 	.word	0xfffffb8d
 8000884:	fffffb8c 	.word	0xfffffb8c
 8000888:	fffffb15 	.word	0xfffffb15
 800088c:	fffffb14 	.word	0xfffffb14
 8000890:	fffffa9d 	.word	0xfffffa9d
 8000894:	fffffa9c 	.word	0xfffffa9c
 8000898:	fffffa25 	.word	0xfffffa25
 800089c:	fffffa24 	.word	0xfffffa24

080008a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <MX_ADC1_Init+0x98>)
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <MX_ADC1_Init+0x9c>)
 80008b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_ADC1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_ADC1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_ADC1_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_ADC1_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_ADC1_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_ADC1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_ADC1_Init+0x98>)
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_ADC1_Init+0xa0>)
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_ADC1_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_ADC1_Init+0x98>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_ADC1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_ADC1_Init+0x98>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fe:	480e      	ldr	r0, [pc, #56]	; (8000938 <MX_ADC1_Init+0x98>)
 8000900:	f001 fb94 	bl	800202c <HAL_ADC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 ff8b 	bl	8001824 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800090e:	2308      	movs	r3, #8
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC1_Init+0x98>)
 8000920:	f001 fd48 	bl	80023b4 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800092a:	f000 ff7b 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000e8 	.word	0x200000e8
 800093c:	40012000 	.word	0x40012000
 8000940:	0f000001 	.word	0x0f000001

08000944 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <HAL_ADC_MspInit+0x7c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d127      	bne.n	80009b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <HAL_ADC_MspInit+0x80>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <HAL_ADC_MspInit+0x80>)
 8000970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <HAL_ADC_MspInit+0x80>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_ADC_MspInit+0x80>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_ADC_MspInit+0x80>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_ADC_MspInit+0x80>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099e:	2301      	movs	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a2:	2303      	movs	r3, #3
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <HAL_ADC_MspInit+0x84>)
 80009b2:	f002 f83f 	bl	8002a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40012000 	.word	0x40012000
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400

080009cc <disp1color_FillScreenbuff>:

//==============================================================================
// Процедура заполняет буфер кадра значением FillValue
//==============================================================================
void disp1color_FillScreenbuff(uint8_t FillValue)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  memset(disp1color_buff, FillValue, sizeof(disp1color_buff));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2240      	movs	r2, #64	; 0x40
 80009da:	4619      	mov	r1, r3
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <disp1color_FillScreenbuff+0x20>)
 80009de:	f003 fddb 	bl	8004598 <memset>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001b0 	.word	0x200001b0

080009f0 <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 80009f4:	2140      	movs	r1, #64	; 0x40
 80009f6:	4802      	ldr	r0, [pc, #8]	; (8000a00 <disp1color_UpdateFromBuff+0x10>)
 80009f8:	f000 fa4b 	bl	8000e92 <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200001b0 	.word	0x200001b0

08000a04 <disp1color_printf>:

//==============================================================================
// Процедура выводит на дисплей форматированную строку
//==============================================================================
void disp1color_printf(int16_t X, int16_t Y, uint8_t FontID, const char *args, ...)
{
 8000a04:	b408      	push	{r3}
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b09d      	sub	sp, #116	; 0x74
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	80fb      	strh	r3, [r7, #6]
 8000a10:	460b      	mov	r3, r1
 8000a12:	80bb      	strh	r3, [r7, #4]
 8000a14:	4613      	mov	r3, r2
 8000a16:	70fb      	strb	r3, [r7, #3]
  char StrBuff[100];
  
  //Формирование массива из переданных аргументов
  va_list ap;
  va_start(ap, args);
 8000a18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a1c:	60bb      	str	r3, [r7, #8]
  vsnprintf(StrBuff, sizeof(StrBuff), args, ap);
 8000a1e:	f107 000c 	add.w	r0, r7, #12
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a26:	2164      	movs	r1, #100	; 0x64
 8000a28:	f003 fdea 	bl	8004600 <vsniprintf>
  va_end(ap);
  
  disp1color_DrawString(X, Y, FontID, (uint8_t *)StrBuff);
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	78fa      	ldrb	r2, [r7, #3]
 8000a32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a36:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a3a:	f000 f9d9 	bl	8000df0 <disp1color_DrawString>
}
 8000a3e:	bf00      	nop
 8000a40:	3774      	adds	r7, #116	; 0x74
 8000a42:	46bd      	mov	sp, r7
 8000a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a48:	b001      	add	sp, #4
 8000a4a:	4770      	bx	lr

08000a4c <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
 8000a56:	460b      	mov	r3, r1
 8000a58:	80bb      	strh	r3, [r7, #4]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 8000a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a62:	2b1f      	cmp	r3, #31
 8000a64:	dc48      	bgt.n	8000af8 <disp1color_DrawPixel+0xac>
 8000a66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	dc44      	bgt.n	8000af8 <disp1color_DrawPixel+0xac>
 8000a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db40      	blt.n	8000af8 <disp1color_DrawPixel+0xac>
 8000a76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db3c      	blt.n	8000af8 <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 8000a7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a82:	10db      	asrs	r3, r3, #3
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 8000a88:	88bb      	ldrh	r3, [r7, #4]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	89fb      	ldrh	r3, [r7, #14]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 8000a98:	89fb      	ldrh	r3, [r7, #14]
 8000a9a:	015b      	lsls	r3, r3, #5
 8000a9c:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 8000a9e:	88fa      	ldrh	r2, [r7, #6]
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 8000aa6:	78fb      	ldrb	r3, [r7, #3]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00f      	beq.n	8000acc <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 8000aac:	89fb      	ldrh	r3, [r7, #14]
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <disp1color_DrawPixel+0xb8>)
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	b25a      	sxtb	r2, r3
 8000ab4:	7b7b      	ldrb	r3, [r7, #13]
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	b25b      	sxtb	r3, r3
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	b25a      	sxtb	r2, r3
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	b2d1      	uxtb	r1, r2
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <disp1color_DrawPixel+0xb8>)
 8000ac8:	54d1      	strb	r1, [r2, r3]
 8000aca:	e010      	b.n	8000aee <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <disp1color_DrawPixel+0xb8>)
 8000ad0:	5cd3      	ldrb	r3, [r2, r3]
 8000ad2:	b25a      	sxtb	r2, r3
 8000ad4:	7b7b      	ldrb	r3, [r7, #13]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	b25a      	sxtb	r2, r3
 8000ae6:	89fb      	ldrh	r3, [r7, #14]
 8000ae8:	b2d1      	uxtb	r1, r2
 8000aea:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <disp1color_DrawPixel+0xb8>)
 8000aec:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <disp1color_DrawPixel+0xb8>)
 8000af2:	5cd3      	ldrb	r3, [r2, r3]
 8000af4:	733b      	strb	r3, [r7, #12]
 8000af6:	e000      	b.n	8000afa <disp1color_DrawPixel+0xae>
    return;
 8000af8:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	200001b0 	.word	0x200001b0

08000b08 <disp1color_DrawLine>:

//==============================================================================
// Процедура рисует прямую линию в буфере кадра дисплея
//==============================================================================
void disp1color_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4604      	mov	r4, r0
 8000b10:	4608      	mov	r0, r1
 8000b12:	4611      	mov	r1, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	4623      	mov	r3, r4
 8000b18:	80fb      	strh	r3, [r7, #6]
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80bb      	strh	r3, [r7, #4]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	807b      	strh	r3, [r7, #2]
 8000b22:	4613      	mov	r3, r2
 8000b24:	803b      	strh	r3, [r7, #0]
  const int16_t deltaX = abs(x2 - x1);
 8000b26:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bfb8      	it	lt
 8000b34:	425b      	neglt	r3, r3
 8000b36:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 8000b38:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bfb8      	it	lt
 8000b46:	425b      	neglt	r3, r3
 8000b48:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 8000b4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	da01      	bge.n	8000b5a <disp1color_DrawLine+0x52>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e001      	b.n	8000b5e <disp1color_DrawLine+0x56>
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 8000b60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	da01      	bge.n	8000b70 <disp1color_DrawLine+0x68>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e001      	b.n	8000b74 <disp1color_DrawLine+0x6c>
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8000b76:	8aba      	ldrh	r2, [r7, #20]
 8000b78:	8a7b      	ldrh	r3, [r7, #18]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	82fb      	strh	r3, [r7, #22]

  disp1color_DrawPixel(x2, y2, 1);
 8000b80:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000b84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff5e 	bl	8000a4c <disp1color_DrawPixel>

  while (x1 != x2 || y1 != y2) 
 8000b90:	e02c      	b.n	8000bec <disp1color_DrawLine+0xe4>
  {
    disp1color_DrawPixel(x1, y1, 1);
 8000b92:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff55 	bl	8000a4c <disp1color_DrawPixel>
    const int16_t error2 = error * 2;
 8000ba2:	8afb      	ldrh	r3, [r7, #22]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) 
 8000baa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000bae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000bb2:	425b      	negs	r3, r3
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dd09      	ble.n	8000bcc <disp1color_DrawLine+0xc4>
    {
      error -= deltaY;
 8000bb8:	8afa      	ldrh	r2, [r7, #22]
 8000bba:	8a7b      	ldrh	r3, [r7, #18]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	8a3b      	ldrh	r3, [r7, #16]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX)
 8000bcc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000bd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	da09      	bge.n	8000bec <disp1color_DrawLine+0xe4>
    {
      error += deltaX;
 8000bd8:	8afa      	ldrh	r2, [r7, #22]
 8000bda:	8abb      	ldrh	r3, [r7, #20]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 8000be2:	88ba      	ldrh	r2, [r7, #4]
 8000be4:	89fb      	ldrh	r3, [r7, #14]
 8000be6:	4413      	add	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) 
 8000bec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000bf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d1cc      	bne.n	8000b92 <disp1color_DrawLine+0x8a>
 8000bf8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000bfc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d1c6      	bne.n	8000b92 <disp1color_DrawLine+0x8a>
    }
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	371c      	adds	r7, #28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}

08000c0e <disp1color_DrawRectangle>:

//==============================================================================
// Процедура рисует прямоугольник в буфере кадра дисплея
//==============================================================================
void disp1color_DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 8000c0e:	b590      	push	{r4, r7, lr}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4604      	mov	r4, r0
 8000c16:	4608      	mov	r0, r1
 8000c18:	4611      	mov	r1, r2
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4623      	mov	r3, r4
 8000c1e:	80fb      	strh	r3, [r7, #6]
 8000c20:	4603      	mov	r3, r0
 8000c22:	80bb      	strh	r3, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	803b      	strh	r3, [r7, #0]
  disp1color_DrawLine(x1, y1, x1, y2);
 8000c2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c30:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c34:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c38:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c3c:	f7ff ff64 	bl	8000b08 <disp1color_DrawLine>
  disp1color_DrawLine(x2, y1, x2, y2);
 8000c40:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c44:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c48:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c4c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000c50:	f7ff ff5a 	bl	8000b08 <disp1color_DrawLine>
  disp1color_DrawLine(x1, y1, x2, y1);
 8000c54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c5c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c60:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c64:	f7ff ff50 	bl	8000b08 <disp1color_DrawLine>
  disp1color_DrawLine(x1, y2, x2, y2);
 8000c68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c6c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c70:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000c74:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c78:	f7ff ff46 	bl	8000b08 <disp1color_DrawLine>
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}

08000c84 <disp1color_DrawChar>:

//==============================================================================
// Функция вывода символа Char на дисплей. Возвращает ширину выведенного символа
//==============================================================================
uint8_t disp1color_DrawChar(int16_t X, int16_t Y, uint8_t FontID, uint8_t Char)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	4611      	mov	r1, r2
 8000c90:	461a      	mov	r2, r3
 8000c92:	4623      	mov	r3, r4
 8000c94:	80fb      	strh	r3, [r7, #6]
 8000c96:	4603      	mov	r3, r0
 8000c98:	80bb      	strh	r3, [r7, #4]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	70fb      	strb	r3, [r7, #3]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	70bb      	strb	r3, [r7, #2]

  // Указатель на подтабличку конкретного символа шрифта
  uint8_t *pCharTable = font_GetFontStruct(FontID, Char);
 8000ca2:	78ba      	ldrb	r2, [r7, #2]
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 fa85 	bl	80011b8 <font_GetFontStruct>
 8000cae:	6138      	str	r0, [r7, #16]
  uint8_t CharWidth = font_GetCharWidth(pCharTable);    // Ширина символа
 8000cb0:	6938      	ldr	r0, [r7, #16]
 8000cb2:	f000 fa97 	bl	80011e4 <font_GetCharWidth>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	73fb      	strb	r3, [r7, #15]
  uint8_t CharHeight = font_GetCharHeight(pCharTable);  // Высота символа
 8000cba:	6938      	ldr	r0, [r7, #16]
 8000cbc:	f000 fa9e 	bl	80011fc <font_GetCharHeight>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	73bb      	strb	r3, [r7, #14]
  pCharTable += 2;
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	613b      	str	r3, [r7, #16]
  
  if (FontID == FONTID_6X8M)
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d132      	bne.n	8000d36 <disp1color_DrawChar+0xb2>
  {
    for (uint8_t row = 0; row < CharHeight; row++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	75fb      	strb	r3, [r7, #23]
 8000cd4:	e02a      	b.n	8000d2c <disp1color_DrawChar+0xa8>
    {
		for (uint8_t col = 0; col < CharWidth; col++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	75bb      	strb	r3, [r7, #22]
 8000cda:	e020      	b.n	8000d1e <disp1color_DrawChar+0x9a>

			//printf("X+col=%d%s%d%s", X + col, " Y+row=", Y + row, "\n");
			disp1color_DrawPixel(X + col, Y + row, pCharTable[row] & (1 << (7 - col)));
 8000cdc:	7dbb      	ldrb	r3, [r7, #22]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	b218      	sxth	r0, r3
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	88bb      	ldrh	r3, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	b219      	sxth	r1, r3
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b25a      	sxtb	r2, r3
 8000cfe:	7dbb      	ldrb	r3, [r7, #22]
 8000d00:	f1c3 0307 	rsb	r3, r3, #7
 8000d04:	2401      	movs	r4, #1
 8000d06:	fa04 f303 	lsl.w	r3, r4, r3
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	f7ff fe9a 	bl	8000a4c <disp1color_DrawPixel>
		for (uint8_t col = 0; col < CharWidth; col++) {
 8000d18:	7dbb      	ldrb	r3, [r7, #22]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	75bb      	strb	r3, [r7, #22]
 8000d1e:	7dba      	ldrb	r2, [r7, #22]
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3da      	bcc.n	8000cdc <disp1color_DrawChar+0x58>
    for (uint8_t row = 0; row < CharHeight; row++)
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	75fb      	strb	r3, [r7, #23]
 8000d2c:	7dfa      	ldrb	r2, [r7, #23]
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3d0      	bcc.n	8000cd6 <disp1color_DrawChar+0x52>
 8000d34:	e057      	b.n	8000de6 <disp1color_DrawChar+0x162>
		}
    }
  }
  else
  {
    for (uint8_t row = 0; row < CharHeight; row++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	757b      	strb	r3, [r7, #21]
 8000d3a:	e050      	b.n	8000dde <disp1color_DrawChar+0x15a>
    {
      for (uint8_t col = 0; col < CharWidth; col++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	753b      	strb	r3, [r7, #20]
 8000d40:	e046      	b.n	8000dd0 <disp1color_DrawChar+0x14c>
      {
        if (col < 8)
 8000d42:	7d3b      	ldrb	r3, [r7, #20]
 8000d44:	2b07      	cmp	r3, #7
 8000d46:	d820      	bhi.n	8000d8a <disp1color_DrawChar+0x106>
          disp1color_DrawPixel(X + col, Y + row, pCharTable[row * 2] & (1 << (7 - col)));
 8000d48:	7d3b      	ldrb	r3, [r7, #20]
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4413      	add	r3, r2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b218      	sxth	r0, r3
 8000d54:	7d7b      	ldrb	r3, [r7, #21]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	88bb      	ldrh	r3, [r7, #4]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	b219      	sxth	r1, r3
 8000d60:	7d7b      	ldrb	r3, [r7, #21]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	461a      	mov	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4413      	add	r3, r2
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b25a      	sxtb	r2, r3
 8000d6e:	7d3b      	ldrb	r3, [r7, #20]
 8000d70:	f1c3 0307 	rsb	r3, r3, #7
 8000d74:	2401      	movs	r4, #1
 8000d76:	fa04 f303 	lsl.w	r3, r4, r3
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	461a      	mov	r2, r3
 8000d84:	f7ff fe62 	bl	8000a4c <disp1color_DrawPixel>
 8000d88:	e01f      	b.n	8000dca <disp1color_DrawChar+0x146>
        else
          disp1color_DrawPixel(X + col, Y + row, pCharTable[(row * 2) + 1] & (1 << (15 - col)));
 8000d8a:	7d3b      	ldrb	r3, [r7, #20]
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	4413      	add	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b218      	sxth	r0, r3
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	b219      	sxth	r1, r3
 8000da2:	7d7b      	ldrb	r3, [r7, #21]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	3301      	adds	r3, #1
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b25a      	sxtb	r2, r3
 8000db0:	7d3b      	ldrb	r3, [r7, #20]
 8000db2:	f1c3 030f 	rsb	r3, r3, #15
 8000db6:	2401      	movs	r4, #1
 8000db8:	fa04 f303 	lsl.w	r3, r4, r3
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f7ff fe41 	bl	8000a4c <disp1color_DrawPixel>
      for (uint8_t col = 0; col < CharWidth; col++)
 8000dca:	7d3b      	ldrb	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	753b      	strb	r3, [r7, #20]
 8000dd0:	7d3a      	ldrb	r2, [r7, #20]
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d3b4      	bcc.n	8000d42 <disp1color_DrawChar+0xbe>
    for (uint8_t row = 0; row < CharHeight; row++)
 8000dd8:	7d7b      	ldrb	r3, [r7, #21]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	757b      	strb	r3, [r7, #21]
 8000dde:	7d7a      	ldrb	r2, [r7, #21]
 8000de0:	7bbb      	ldrb	r3, [r7, #14]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d3aa      	bcc.n	8000d3c <disp1color_DrawChar+0xb8>
      }
    }
  }
  
  return CharWidth;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd90      	pop	{r4, r7, pc}

08000df0 <disp1color_DrawString>:

//==============================================================================
// Функция вывода текста из строки Str на дисплей
//==============================================================================
void disp1color_DrawString(int16_t X, int16_t Y, uint8_t FontID, uint8_t *Str)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	4603      	mov	r3, r0
 8000dfa:	81fb      	strh	r3, [r7, #14]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	81bb      	strh	r3, [r7, #12]
 8000e00:	4613      	mov	r3, r2
 8000e02:	72fb      	strb	r3, [r7, #11]
  uint8_t done = 0;             // Флаг окончания вывода
 8000e04:	2300      	movs	r3, #0
 8000e06:	75fb      	strb	r3, [r7, #23]
  int16_t Xstart = X;           // Запоминаем куда будем переводить каретку при переходе на новую строку
 8000e08:	89fb      	ldrh	r3, [r7, #14]
 8000e0a:	82bb      	strh	r3, [r7, #20]
  uint8_t StrHeight = 8;        // Высота символов в пикселях для перехода на слежующую строку
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	75bb      	strb	r3, [r7, #22]

  // Вывод строки
  while (!done)
 8000e10:	e037      	b.n	8000e82 <disp1color_DrawString+0x92>
  {
    switch (*Str)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b0d      	cmp	r3, #13
 8000e18:	d010      	beq.n	8000e3c <disp1color_DrawString+0x4c>
 8000e1a:	2b0d      	cmp	r3, #13
 8000e1c:	dc11      	bgt.n	8000e42 <disp1color_DrawString+0x52>
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <disp1color_DrawString+0x38>
 8000e22:	2b0a      	cmp	r3, #10
 8000e24:	d003      	beq.n	8000e2e <disp1color_DrawString+0x3e>
 8000e26:	e00c      	b.n	8000e42 <disp1color_DrawString+0x52>
    {
    case '\0':  // Конец строки
      done = 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8000e2c:	e026      	b.n	8000e7c <disp1color_DrawString+0x8c>
    case '\n':  // Переход на следующую строку
      Y += StrHeight;
 8000e2e:	7dbb      	ldrb	r3, [r7, #22]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	89bb      	ldrh	r3, [r7, #12]
 8000e34:	4413      	add	r3, r2
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	81bb      	strh	r3, [r7, #12]
      break;
 8000e3a:	e01f      	b.n	8000e7c <disp1color_DrawString+0x8c>
    case '\r':  // Переход в начало строки
      X = Xstart;
 8000e3c:	8abb      	ldrh	r3, [r7, #20]
 8000e3e:	81fb      	strh	r3, [r7, #14]
      break;
 8000e40:	e01c      	b.n	8000e7c <disp1color_DrawString+0x8c>
    default:    // Отображаемый символ
		//printf("Symbol:%c\n", *Str);
		//printf("X=%d%s%d%s", X, " Y=", Y, "\n");
      X += disp1color_DrawChar(X, Y, FontID, *Str);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	7afa      	ldrb	r2, [r7, #11]
 8000e48:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000e4c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000e50:	f7ff ff18 	bl	8000c84 <disp1color_DrawChar>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	81fb      	strh	r3, [r7, #14]
	  ///////
	  //setlocale(LC_ALL, "ru_UA.UTF-8");
	 // printf("BUF vert:\n");
	// print_buf(disp1color_buff, sizeof(disp1color_buff));
	  ///////
      StrHeight = font_GetCharHeight(font_GetFontStruct(FontID, *Str));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	7afb      	ldrb	r3, [r7, #11]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f9a5 	bl	80011b8 <font_GetFontStruct>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 f9c3 	bl	80011fc <font_GetCharHeight>
 8000e76:	4603      	mov	r3, r0
 8000e78:	75bb      	strb	r3, [r7, #22]
      break;
 8000e7a:	bf00      	nop
    }
    Str++;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
  while (!done)
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0c4      	beq.n	8000e12 <disp1color_DrawString+0x22>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 f817 	bl	8000ed8 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 8000eaa:	887b      	ldrh	r3, [r7, #2]
 8000eac:	461a      	mov	r2, r3
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 f811 	bl	8000ed8 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f000 f80b 	bl	8000ed8 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f805 	bl	8000ed8 <DMD_1COLOR_UpdateRow4>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	095b      	lsrs	r3, r3, #5
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <DMD_1COLOR_UpdateRow4+0xd0>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 8000efc:	2302      	movs	r3, #2
 8000efe:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	83fb      	strh	r3, [r7, #30]
 8000f04:	2300      	movs	r3, #0
 8000f06:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	76fb      	strb	r3, [r7, #27]
 8000f0c:	e040      	b.n	8000f90 <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 8000f0e:	8bfb      	ldrh	r3, [r7, #30]
 8000f10:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	76bb      	strb	r3, [r7, #26]
 8000f16:	e028      	b.n	8000f6a <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <DMD_1COLOR_UpdateRow4+0xd4>)
 8000f1a:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 8000f1c:	8bbb      	ldrh	r3, [r7, #28]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e015      	b.n	8000f56 <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	6939      	ldr	r1, [r7, #16]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f003 fb24 	bl	800457c <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	491d      	ldr	r1, [pc, #116]	; (8000fac <DMD_1COLOR_UpdateRow4+0xd4>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f839 	bl	8000fb0 <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3320      	adds	r3, #32
 8000f42:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	3301      	adds	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	7a7b      	ldrb	r3, [r7, #9]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d3e5      	bcc.n	8000f2a <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 8000f5e:	8bbb      	ldrh	r3, [r7, #28]
 8000f60:	3320      	adds	r3, #32
 8000f62:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 8000f64:	7ebb      	ldrb	r3, [r7, #26]
 8000f66:	3301      	adds	r3, #1
 8000f68:	76bb      	strb	r3, [r7, #26]
 8000f6a:	7ebb      	ldrb	r3, [r7, #26]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	897a      	ldrh	r2, [r7, #10]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8d1      	bhi.n	8000f18 <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 8000f74:	7a7b      	ldrb	r3, [r7, #9]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <DMD_1COLOR_UpdateRow4+0xcc>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	fb12 f303 	smulbb	r3, r2, r3
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	8bfb      	ldrh	r3, [r7, #30]
 8000f86:	4413      	add	r3, r2
 8000f88:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000f8a:	7efb      	ldrb	r3, [r7, #27]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	76fb      	strb	r3, [r7, #27]
 8000f90:	7efb      	ldrb	r3, [r7, #27]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	89ba      	ldrh	r2, [r7, #12]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d8b9      	bhi.n	8000f0e <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000001 	.word	0x20000001
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000130 	.word	0x20000130

08000fb0 <DMD_1COLOR_SendFromMatrixBuff>:

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t *) &(DMD_1COLOR_Buff[Row4][0]);
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	4a22      	ldr	r2, [pc, #136]	; (8001054 <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	74fb      	strb	r3, [r7, #19]
 8000fd2:	e035      	b.n	8001040 <DMD_1COLOR_SendFromMatrixBuff+0x90>
	{
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8000fd4:	7c7b      	ldrb	r3, [r7, #17]
 8000fd6:	74bb      	strb	r3, [r7, #18]
 8000fd8:	e02c      	b.n	8001034 <DMD_1COLOR_SendFromMatrixBuff+0x84>
		{
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 8000fda:	7cbb      	ldrb	r3, [r7, #18]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	015b      	lsls	r3, r3, #5
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 8000fe8:	7cfb      	ldrb	r3, [r7, #19]
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	461a      	mov	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4), p8Bytes);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	697c      	ldr	r4, [r7, #20]
 8001002:	1c63      	adds	r3, r4, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	68f9      	ldr	r1, [r7, #12]
 8001008:	4610      	mov	r0, r2
 800100a:	f000 f825 	bl	8001058 <DMD_1COLOR_GetFrom8ScreenBytes>
 800100e:	4603      	mov	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2201      	movs	r2, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	b2da      	uxtb	r2, r3
 800101c:	697c      	ldr	r4, [r7, #20]
 800101e:	1c63      	adds	r3, r4, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	68f9      	ldr	r1, [r7, #12]
 8001024:	4610      	mov	r0, r2
 8001026:	f000 f817 	bl	8001058 <DMD_1COLOR_GetFrom8ScreenBytes>
 800102a:	4603      	mov	r3, r0
 800102c:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 800102e:	7cbb      	ldrb	r3, [r7, #18]
 8001030:	3b01      	subs	r3, #1
 8001032:	74bb      	strb	r3, [r7, #18]
 8001034:	7cbb      	ldrb	r3, [r7, #18]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1cf      	bne.n	8000fda <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 800103a:	7cfb      	ldrb	r3, [r7, #19]
 800103c:	3301      	adds	r3, #1
 800103e:	74fb      	strb	r3, [r7, #19]
 8001040:	7cfa      	ldrb	r2, [r7, #19]
 8001042:	7c3b      	ldrb	r3, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d3c5      	bcc.n	8000fd4 <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}
 8001052:	bf00      	nop
 8001054:	20000170 	.word	0x20000170

08001058 <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	73bb      	strb	r3, [r7, #14]
 800106c:	e010      	b.n	8001090 <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4013      	ands	r3, r2
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	4313      	orrs	r3, r2
 8001082:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	085b      	lsrs	r3, r3, #1
 8001088:	73bb      	strb	r3, [r7, #14]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1eb      	bne.n	800106e <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	43db      	mvns	r3, r3
 800109a:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	e042      	b.n	800113e <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	71bb      	strb	r3, [r7, #6]
 80010bc:	e039      	b.n	8001132 <prepare_data+0x86>
			if (i == 0) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10a      	bne.n	80010da <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 80010c4:	79f9      	ldrb	r1, [r7, #7]
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	4822      	ldr	r0, [pc, #136]	; (8001154 <prepare_data+0xa8>)
 80010cc:	0109      	lsls	r1, r1, #4
 80010ce:	4401      	add	r1, r0
 80010d0:	440a      	add	r2, r1
 80010d2:	7811      	ldrb	r1, [r2, #0]
 80010d4:	4a20      	ldr	r2, [pc, #128]	; (8001158 <prepare_data+0xac>)
 80010d6:	54d1      	strb	r1, [r2, r3]
 80010d8:	e028      	b.n	800112c <prepare_data+0x80>
			}
			else if (i == 1) {
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d10a      	bne.n	80010f6 <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 80010e0:	79f9      	ldrb	r1, [r7, #7]
 80010e2:	79ba      	ldrb	r2, [r7, #6]
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	481b      	ldr	r0, [pc, #108]	; (8001154 <prepare_data+0xa8>)
 80010e8:	0109      	lsls	r1, r1, #4
 80010ea:	4401      	add	r1, r0
 80010ec:	440a      	add	r2, r1
 80010ee:	7811      	ldrb	r1, [r2, #0]
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <prepare_data+0xb0>)
 80010f2:	54d1      	strb	r1, [r2, r3]
 80010f4:	e01a      	b.n	800112c <prepare_data+0x80>
			}
			else if (i == 2) {
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d10a      	bne.n	8001112 <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 80010fc:	79f9      	ldrb	r1, [r7, #7]
 80010fe:	79ba      	ldrb	r2, [r7, #6]
 8001100:	79bb      	ldrb	r3, [r7, #6]
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <prepare_data+0xa8>)
 8001104:	0109      	lsls	r1, r1, #4
 8001106:	4401      	add	r1, r0
 8001108:	440a      	add	r2, r1
 800110a:	7811      	ldrb	r1, [r2, #0]
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <prepare_data+0xb4>)
 800110e:	54d1      	strb	r1, [r2, r3]
 8001110:	e00c      	b.n	800112c <prepare_data+0x80>
			}
			else if (i == 3) {
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d109      	bne.n	800112c <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 8001118:	79f9      	ldrb	r1, [r7, #7]
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <prepare_data+0xa8>)
 8001120:	0109      	lsls	r1, r1, #4
 8001122:	4401      	add	r1, r0
 8001124:	440a      	add	r2, r1
 8001126:	7811      	ldrb	r1, [r2, #0]
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <prepare_data+0xb8>)
 800112a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	3301      	adds	r3, #1
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d9c2      	bls.n	80010be <prepare_data+0x12>
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	3301      	adds	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b03      	cmp	r3, #3
 8001142:	d9b9      	bls.n	80010b8 <prepare_data+0xc>
			}
		}
	}
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000170 	.word	0x20000170
 8001158:	200001f0 	.word	0x200001f0
 800115c:	20000200 	.word	0x20000200
 8001160:	20000210 	.word	0x20000210
 8001164:	20000220 	.word	0x20000220

08001168 <f10x16f_GetCharTable>:

//==============================================================================
// Функция возвращает указатель на подтаблицу символа Char
//==============================================================================
uint8_t *f10x16f_GetCharTable(uint8_t Char)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  return (uint8_t *)(&f10x16f_table[Char][0]);
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	4413      	add	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <f10x16f_GetCharTable+0x24>)
 800117e:	4413      	add	r3, r2
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	08004ed8 	.word	0x08004ed8

08001190 <f6x8m_GetCharTable>:

//==============================================================================
// Функция возвращает указатель на подтаблицу символа Char
//==============================================================================
uint8_t *f6x8m_GetCharTable(uint8_t Char)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  return (uint8_t *)(&f6x8m_table[Char][0]);
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4a03      	ldr	r2, [pc, #12]	; (80011b4 <f6x8m_GetCharTable+0x24>)
 80011a6:	4413      	add	r3, r2
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	080070d8 	.word	0x080070d8

080011b8 <font_GetFontStruct>:

//==============================================================================
// Функция возвращает указатель на структуру, описывающую символ Char
//==============================================================================
uint8_t *font_GetFontStruct(uint8_t FontID, uint8_t Char)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
  return font_table_funcs[FontID](Char);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <font_GetFontStruct+0x28>)
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	79ba      	ldrb	r2, [r7, #6]
 80011d2:	4610      	mov	r0, r2
 80011d4:	4798      	blx	r3
 80011d6:	4603      	mov	r3, r0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	08007ad8 	.word	0x08007ad8

080011e4 <font_GetCharWidth>:

//==============================================================================
// Функция возвращает ширину символа
//==============================================================================
uint8_t font_GetCharWidth(uint8_t *pCharTable)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return *pCharTable;  // Ширина символа
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <font_GetCharHeight>:

//==============================================================================
// Функция возвращает высоту символа
//==============================================================================
uint8_t font_GetCharHeight(uint8_t *pCharTable)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  pCharTable++;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3301      	adds	r3, #1
 8001208:	607b      	str	r3, [r7, #4]
  return *pCharTable;  // Высота символа
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a2f      	ldr	r2, [pc, #188]	; (80012f8 <MX_GPIO_Init+0xdc>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_GPIO_Init+0xdc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_GPIO_Init+0xdc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_GPIO_Init+0xdc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nOE_Pin|SCLK_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2150      	movs	r1, #80	; 0x50
 80012a6:	4815      	ldr	r0, [pc, #84]	; (80012fc <MX_GPIO_Init+0xe0>)
 80012a8:	f001 fd48 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2130      	movs	r1, #48	; 0x30
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_GPIO_Init+0xe4>)
 80012b2:	f001 fd43 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nOE_Pin|SCLK_Pin;
 80012b6:	2350      	movs	r3, #80	; 0x50
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_GPIO_Init+0xe0>)
 80012ce:	f001 fbb1 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 80012d2:	2330      	movs	r3, #48	; 0x30
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_GPIO_Init+0xe4>)
 80012ea:	f001 fba3 	bl	8002a34 <HAL_GPIO_Init>

}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020800 	.word	0x40020800

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	rectangle_x1 = 31;
 800130a:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <main+0xf0>)
 800130c:	221f      	movs	r2, #31
 800130e:	701a      	strb	r2, [r3, #0]
	rectangle_x2 = 35;
 8001310:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <main+0xf4>)
 8001312:	2223      	movs	r2, #35	; 0x23
 8001314:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f000 fe17 	bl	8001f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f889 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f7ff ff7d 	bl	800121c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001322:	f000 fa9d 	bl	8001860 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001326:	f000 fc55 	bl	8001bd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800132a:	f000 fcd5 	bl	8001cd8 <MX_TIM2_Init>
  MX_ADC1_Init();
 800132e:	f7ff fab7 	bl	80008a0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001332:	f000 fd27 	bl	8001d84 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8001336:	4831      	ldr	r0, [pc, #196]	; (80013fc <main+0xf8>)
 8001338:	f002 fbce 	bl	8003ad8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800133c:	4830      	ldr	r0, [pc, #192]	; (8001400 <main+0xfc>)
 800133e:	f002 fbcb 	bl	8003ad8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001342:	4830      	ldr	r0, [pc, #192]	; (8001404 <main+0x100>)
 8001344:	f002 fbc8 	bl	8003ad8 <HAL_TIM_Base_Start_IT>

	median_filter_init(&median_filter_MIC);
 8001348:	482f      	ldr	r0, [pc, #188]	; (8001408 <main+0x104>)
 800134a:	f000 fa70 	bl	800182e <median_filter_init>
	FlappyBird_init(&FlappyBird);
 800134e:	482f      	ldr	r0, [pc, #188]	; (800140c <main+0x108>)
 8001350:	f7ff f920 	bl	8000594 <FlappyBird_init>

	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2110      	movs	r1, #16
 8001358:	482d      	ldr	r0, [pc, #180]	; (8001410 <main+0x10c>)
 800135a:	f001 fcef 	bl	8002d3c <HAL_GPIO_WritePin>
	char *pMyStr = "GAME OVER, Press Reset to continue";  //Строка на вывод
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <main+0x110>)
 8001360:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		State = 1;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <main+0x114>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
		if ((x0_bird == rectangle_x1 && y0_bird <= rectangle_y1)
 8001368:	4b2c      	ldr	r3, [pc, #176]	; (800141c <main+0x118>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <main+0xf0>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b25b      	sxtb	r3, r3
 8001374:	429a      	cmp	r2, r3
 8001376:	d107      	bne.n	8001388 <main+0x84>
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <main+0x11c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <main+0x120>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	429a      	cmp	r2, r3
 8001386:	d913      	bls.n	80013b0 <main+0xac>
				|| (x0_bird == rectangle_x1 && y0_bird >= rectangle_y2) || lose == 1) {
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <main+0x118>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <main+0xf0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b25b      	sxtb	r3, r3
 8001394:	429a      	cmp	r2, r3
 8001396:	d107      	bne.n	80013a8 <main+0xa4>
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <main+0x11c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <main+0x124>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d203      	bcs.n	80013b0 <main+0xac>
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <main+0x128>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d106      	bne.n	80013be <main+0xba>
			game_over(pMyStr);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f9f0 	bl	8001796 <game_over>
			lose = 1;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <main+0x128>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e019      	b.n	80013f2 <main+0xee>
		} else {
			Flappy_Bird(x0_bird, y0_bird, State);
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <main+0x118>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4a16      	ldr	r2, [pc, #88]	; (8001420 <main+0x11c>)
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	b211      	sxth	r1, r2
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <main+0x114>)
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f9a6 	bl	8001722 <Flappy_Bird>
			draw_game(rectangle_x1, rectangle_x2, rectangle_y1, rectangle_y2);
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <main+0xf0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b258      	sxtb	r0, r3
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <main+0xf4>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b259      	sxtb	r1, r3
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <main+0x120>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <main+0x124>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f000 f949 	bl	8001684 <draw_game>
		State = 1;
 80013f2:	e7b6      	b.n	8001362 <main+0x5e>
 80013f4:	20000232 	.word	0x20000232
 80013f8:	20000234 	.word	0x20000234
 80013fc:	20000300 	.word	0x20000300
 8001400:	20000348 	.word	0x20000348
 8001404:	20000390 	.word	0x20000390
 8001408:	20000238 	.word	0x20000238
 800140c:	2000025c 	.word	0x2000025c
 8001410:	40020000 	.word	0x40020000
 8001414:	08004eb4 	.word	0x08004eb4
 8001418:	20000231 	.word	0x20000231
 800141c:	20000002 	.word	0x20000002
 8001420:	20000230 	.word	0x20000230
 8001424:	20000233 	.word	0x20000233
 8001428:	20000235 	.word	0x20000235
 800142c:	2000029c 	.word	0x2000029c

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	; 0x50
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2230      	movs	r2, #48	; 0x30
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f003 f8aa 	bl	8004598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <SystemClock_Config+0xc8>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <SystemClock_Config+0xc8>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <SystemClock_Config+0xc8>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <SystemClock_Config+0xcc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a20      	ldr	r2, [pc, #128]	; (80014fc <SystemClock_Config+0xcc>)
 800147a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <SystemClock_Config+0xcc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001490:	2301      	movs	r3, #1
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001494:	2310      	movs	r3, #16
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001498:	2302      	movs	r3, #2
 800149a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800149c:	2300      	movs	r3, #0
 800149e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014a0:	2308      	movs	r3, #8
 80014a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80014a4:	2360      	movs	r3, #96	; 0x60
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014ac:	2304      	movs	r3, #4
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b0:	f107 0320 	add.w	r3, r7, #32
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fc5b 	bl	8002d70 <HAL_RCC_OscConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014c0:	f000 f9b0 	bl	8001824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c4:	230f      	movs	r3, #15
 80014c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c8:	2302      	movs	r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 febd 	bl	8003260 <HAL_RCC_ClockConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014ec:	f000 f99a 	bl	8001824 <Error_Handler>
  }
}
 80014f0:	bf00      	nop
 80014f2:	3750      	adds	r7, #80	; 0x50
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000

08001500 <disp_row>:

/* USER CODE BEGIN 4 */

void disp_row(int row){
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]


	  if (row == 0){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d122      	bne.n	8001554 <disp_row+0x54>

		  for(uint8_t i=0; i<6; i++){
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e008      	b.n	8001526 <disp_row+0x26>
		  		HAL_SPI_Transmit(&hspi1, &data1, 16, 10);
 8001514:	230a      	movs	r3, #10
 8001516:	2210      	movs	r2, #16
 8001518:	4953      	ldr	r1, [pc, #332]	; (8001668 <disp_row+0x168>)
 800151a:	4854      	ldr	r0, [pc, #336]	; (800166c <disp_row+0x16c>)
 800151c:	f002 f8d5 	bl	80036ca <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d9f3      	bls.n	8001514 <disp_row+0x14>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	484f      	ldr	r0, [pc, #316]	; (8001670 <disp_row+0x170>)
 8001532:	f001 fc03 	bl	8002d3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	484d      	ldr	r0, [pc, #308]	; (8001670 <disp_row+0x170>)
 800153c:	f001 fbfe 	bl	8002d3c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2110      	movs	r1, #16
 8001544:	484b      	ldr	r0, [pc, #300]	; (8001674 <disp_row+0x174>)
 8001546:	f001 fbf9 	bl	8002d3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2120      	movs	r1, #32
 800154e:	4849      	ldr	r0, [pc, #292]	; (8001674 <disp_row+0x174>)
 8001550:	f001 fbf4 	bl	8002d3c <HAL_GPIO_WritePin>
	  }
	  if (row == 1){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d122      	bne.n	80015a0 <disp_row+0xa0>

		  for(uint8_t i=0; i<6; i++){
 800155a:	2300      	movs	r3, #0
 800155c:	73bb      	strb	r3, [r7, #14]
 800155e:	e008      	b.n	8001572 <disp_row+0x72>
		  		HAL_SPI_Transmit(&hspi1, &data2, 16, 10);
 8001560:	230a      	movs	r3, #10
 8001562:	2210      	movs	r2, #16
 8001564:	4944      	ldr	r1, [pc, #272]	; (8001678 <disp_row+0x178>)
 8001566:	4841      	ldr	r0, [pc, #260]	; (800166c <disp_row+0x16c>)
 8001568:	f002 f8af 	bl	80036ca <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	3301      	adds	r3, #1
 8001570:	73bb      	strb	r3, [r7, #14]
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	2b05      	cmp	r3, #5
 8001576:	d9f3      	bls.n	8001560 <disp_row+0x60>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	483c      	ldr	r0, [pc, #240]	; (8001670 <disp_row+0x170>)
 800157e:	f001 fbdd 	bl	8002d3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2140      	movs	r1, #64	; 0x40
 8001586:	483a      	ldr	r0, [pc, #232]	; (8001670 <disp_row+0x170>)
 8001588:	f001 fbd8 	bl	8002d3c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2110      	movs	r1, #16
 8001590:	4838      	ldr	r0, [pc, #224]	; (8001674 <disp_row+0x174>)
 8001592:	f001 fbd3 	bl	8002d3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2120      	movs	r1, #32
 800159a:	4836      	ldr	r0, [pc, #216]	; (8001674 <disp_row+0x174>)
 800159c:	f001 fbce 	bl	8002d3c <HAL_GPIO_WritePin>
	  }

	  if (row == 2){
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d122      	bne.n	80015ec <disp_row+0xec>

		  for(uint8_t i=0; i<6; i++){
 80015a6:	2300      	movs	r3, #0
 80015a8:	737b      	strb	r3, [r7, #13]
 80015aa:	e008      	b.n	80015be <disp_row+0xbe>
		  		HAL_SPI_Transmit(&hspi1, &data3, 16, 10);
 80015ac:	230a      	movs	r3, #10
 80015ae:	2210      	movs	r2, #16
 80015b0:	4932      	ldr	r1, [pc, #200]	; (800167c <disp_row+0x17c>)
 80015b2:	482e      	ldr	r0, [pc, #184]	; (800166c <disp_row+0x16c>)
 80015b4:	f002 f889 	bl	80036ca <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 80015b8:	7b7b      	ldrb	r3, [r7, #13]
 80015ba:	3301      	adds	r3, #1
 80015bc:	737b      	strb	r3, [r7, #13]
 80015be:	7b7b      	ldrb	r3, [r7, #13]
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d9f3      	bls.n	80015ac <disp_row+0xac>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	4829      	ldr	r0, [pc, #164]	; (8001670 <disp_row+0x170>)
 80015ca:	f001 fbb7 	bl	8002d3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	2140      	movs	r1, #64	; 0x40
 80015d2:	4827      	ldr	r0, [pc, #156]	; (8001670 <disp_row+0x170>)
 80015d4:	f001 fbb2 	bl	8002d3c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2110      	movs	r1, #16
 80015dc:	4825      	ldr	r0, [pc, #148]	; (8001674 <disp_row+0x174>)
 80015de:	f001 fbad 	bl	8002d3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2120      	movs	r1, #32
 80015e6:	4823      	ldr	r0, [pc, #140]	; (8001674 <disp_row+0x174>)
 80015e8:	f001 fba8 	bl	8002d3c <HAL_GPIO_WritePin>
	  }

	  if (row == 3){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d122      	bne.n	8001638 <disp_row+0x138>

		  for(uint8_t i=0; i<6; i++){
 80015f2:	2300      	movs	r3, #0
 80015f4:	733b      	strb	r3, [r7, #12]
 80015f6:	e008      	b.n	800160a <disp_row+0x10a>
		  		HAL_SPI_Transmit(&hspi1, &data4, 16, 10);
 80015f8:	230a      	movs	r3, #10
 80015fa:	2210      	movs	r2, #16
 80015fc:	4920      	ldr	r1, [pc, #128]	; (8001680 <disp_row+0x180>)
 80015fe:	481b      	ldr	r0, [pc, #108]	; (800166c <disp_row+0x16c>)
 8001600:	f002 f863 	bl	80036ca <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 8001604:	7b3b      	ldrb	r3, [r7, #12]
 8001606:	3301      	adds	r3, #1
 8001608:	733b      	strb	r3, [r7, #12]
 800160a:	7b3b      	ldrb	r3, [r7, #12]
 800160c:	2b05      	cmp	r3, #5
 800160e:	d9f3      	bls.n	80015f8 <disp_row+0xf8>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2140      	movs	r1, #64	; 0x40
 8001614:	4816      	ldr	r0, [pc, #88]	; (8001670 <disp_row+0x170>)
 8001616:	f001 fb91 	bl	8002d3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800161a:	2201      	movs	r2, #1
 800161c:	2140      	movs	r1, #64	; 0x40
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <disp_row+0x170>)
 8001620:	f001 fb8c 	bl	8002d3c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	2110      	movs	r1, #16
 8001628:	4812      	ldr	r0, [pc, #72]	; (8001674 <disp_row+0x174>)
 800162a:	f001 fb87 	bl	8002d3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	2120      	movs	r1, #32
 8001632:	4810      	ldr	r0, [pc, #64]	; (8001674 <disp_row+0x174>)
 8001634:	f001 fb82 	bl	8002d3c <HAL_GPIO_WritePin>
	  }


	  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2110      	movs	r1, #16
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <disp_row+0x170>)
 800163e:	f001 fb7d 	bl	8002d3c <HAL_GPIO_WritePin>
		  for(uint32_t x=0; x<=500; x++) {};
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	e002      	b.n	800164e <disp_row+0x14e>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3301      	adds	r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001654:	d9f8      	bls.n	8001648 <disp_row+0x148>
	 HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2110      	movs	r1, #16
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <disp_row+0x170>)
 800165c:	f001 fb6e 	bl	8002d3c <HAL_GPIO_WritePin>
  }
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200001f0 	.word	0x200001f0
 800166c:	200002a0 	.word	0x200002a0
 8001670:	40020000 	.word	0x40020000
 8001674:	40020800 	.word	0x40020800
 8001678:	20000200 	.word	0x20000200
 800167c:	20000210 	.word	0x20000210
 8001680:	20000220 	.word	0x20000220

08001684 <draw_game>:

void draw_game(int8_t rectangle_x1, int8_t rectangle_x2, uint8_t rectangle_y1, uint8_t rectangle_y2) {
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4623      	mov	r3, r4
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	4603      	mov	r3, r0
 8001698:	71bb      	strb	r3, [r7, #6]
 800169a:	460b      	mov	r3, r1
 800169c:	717b      	strb	r3, [r7, #5]
 800169e:	4613      	mov	r3, r2
 80016a0:	713b      	strb	r3, [r7, #4]
	disp1color_DrawLine(0, 0, 32, 0);
 80016a2:	2300      	movs	r3, #0
 80016a4:	2220      	movs	r2, #32
 80016a6:	2100      	movs	r1, #0
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fa2d 	bl	8000b08 <disp1color_DrawLine>
	disp1color_DrawLine(0, 15, 32, 15);
 80016ae:	230f      	movs	r3, #15
 80016b0:	2220      	movs	r2, #32
 80016b2:	210f      	movs	r1, #15
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fa27 	bl	8000b08 <disp1color_DrawLine>
	disp1color_DrawRectangle(rectangle_x1, 0, rectangle_x2, rectangle_y1);
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	b218      	sxth	r0, r3
 80016c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	797b      	ldrb	r3, [r7, #5]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	2100      	movs	r1, #0
 80016cc:	f7ff fa9f 	bl	8000c0e <disp1color_DrawRectangle>
	disp1color_DrawRectangle(rectangle_x1, rectangle_y2, rectangle_x2, 15);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	b218      	sxth	r0, r3
 80016d6:	793b      	ldrb	r3, [r7, #4]
 80016d8:	b219      	sxth	r1, r3
 80016da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016de:	b21a      	sxth	r2, r3
 80016e0:	230f      	movs	r3, #15
 80016e2:	f7ff fa94 	bl	8000c0e <disp1color_DrawRectangle>

	disp1color_UpdateFromBuff(); //Перевод рассчитанных данных в массив
 80016e6:	f7ff f983 	bl	80009f0 <disp1color_UpdateFromBuff>
	prepare_data(); //Разбиение массива на массивы под каждую строку
 80016ea:	f7ff fcdf 	bl	80010ac <prepare_data>

	//Включение матрицы (построчно)
	for (uint8_t i = 0; i < 20; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	e00e      	b.n	8001712 <draw_game+0x8e>
		disp_row(0);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff ff03 	bl	8001500 <disp_row>
		disp_row(1);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff ff00 	bl	8001500 <disp_row>
		disp_row(2);
 8001700:	2002      	movs	r0, #2
 8001702:	f7ff fefd 	bl	8001500 <disp_row>
		disp_row(3);
 8001706:	2003      	movs	r0, #3
 8001708:	f7ff fefa 	bl	8001500 <disp_row>
	for (uint8_t i = 0; i < 20; i++) {
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	3301      	adds	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b13      	cmp	r3, #19
 8001716:	d9ed      	bls.n	80016f4 <draw_game+0x70>
	}
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}

08001722 <Flappy_Bird>:

void Flappy_Bird(int16_t x0, int16_t y0, uint8_t State) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	80fb      	strh	r3, [r7, #6]
 800172c:	460b      	mov	r3, r1
 800172e:	80bb      	strh	r3, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	70fb      	strb	r3, [r7, #3]
	disp1color_DrawPixel(x0, y0, State);
 8001734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001738:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f984 	bl	8000a4c <disp1color_DrawPixel>
	disp1color_DrawPixel((x0 + 1), y0, State);
 8001744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001748:	3301      	adds	r3, #1
 800174a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f97b 	bl	8000a4c <disp1color_DrawPixel>
	disp1color_DrawPixel((x0 + 2), y0, State);
 8001756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175a:	3302      	adds	r3, #2
 800175c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f972 	bl	8000a4c <disp1color_DrawPixel>
	disp1color_DrawPixel(x0, (y0 - 1), State);
 8001768:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800176c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001770:	3b01      	subs	r3, #1
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff f969 	bl	8000a4c <disp1color_DrawPixel>
	disp1color_DrawPixel((x0 + 1), (y0 - 1), State);
 800177a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177e:	1c58      	adds	r0, r3, #1
 8001780:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001784:	3b01      	subs	r3, #1
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff f95f 	bl	8000a4c <disp1color_DrawPixel>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <game_over>:

void game_over(char *pMyStr) {
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
	uint16_t strSize = strlen(pMyStr);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7fe fd1e 	bl	80001e0 <strlen>
 80017a4:	4603      	mov	r3, r0
 80017a6:	817b      	strh	r3, [r7, #10]
	uint8_t symbolDelay = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	727b      	strb	r3, [r7, #9]
	disp1color_FillScreenbuff(0);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff f90d 	bl	80009cc <disp1color_FillScreenbuff>
	for (int16_t x = 32; x > -((strSize + symbolDelay) * f6x8_MONO_WIDTH);
 80017b2:	2320      	movs	r3, #32
 80017b4:	81fb      	strh	r3, [r7, #14]
 80017b6:	e025      	b.n	8001804 <game_over+0x6e>
			x--) {

		disp1color_printf(x, 4, FONTID_6X8M, pMyStr); //Расчет данных для вывода
 80017b8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	2104      	movs	r1, #4
 80017c2:	f7ff f91f 	bl	8000a04 <disp1color_printf>

		disp1color_UpdateFromBuff(); //Перевод рассчитанных данных в массив
 80017c6:	f7ff f913 	bl	80009f0 <disp1color_UpdateFromBuff>
		prepare_data();//Разбиение массива на массивы под каждую строку
 80017ca:	f7ff fc6f 	bl	80010ac <prepare_data>

		//Включение матрицы (построчно)
		for (uint8_t i = 0; i < 20; i++) {
 80017ce:	2300      	movs	r3, #0
 80017d0:	737b      	strb	r3, [r7, #13]
 80017d2:	e00e      	b.n	80017f2 <game_over+0x5c>
			disp_row(0);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff fe93 	bl	8001500 <disp_row>
			disp_row(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f7ff fe90 	bl	8001500 <disp_row>
			disp_row(2);
 80017e0:	2002      	movs	r0, #2
 80017e2:	f7ff fe8d 	bl	8001500 <disp_row>
			disp_row(3);
 80017e6:	2003      	movs	r0, #3
 80017e8:	f7ff fe8a 	bl	8001500 <disp_row>
		for (uint8_t i = 0; i < 20; i++) {
 80017ec:	7b7b      	ldrb	r3, [r7, #13]
 80017ee:	3301      	adds	r3, #1
 80017f0:	737b      	strb	r3, [r7, #13]
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	2b13      	cmp	r3, #19
 80017f6:	d9ed      	bls.n	80017d4 <game_over+0x3e>
			x--) {
 80017f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29b      	uxth	r3, r3
 8001802:	81fb      	strh	r3, [r7, #14]
	for (int16_t x = 32; x > -((strSize + symbolDelay) * f6x8_MONO_WIDTH);
 8001804:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001808:	897a      	ldrh	r2, [r7, #10]
 800180a:	7a7b      	ldrb	r3, [r7, #9]
 800180c:	441a      	add	r2, r3
 800180e:	4613      	mov	r3, r2
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4299      	cmp	r1, r3
 8001818:	dcce      	bgt.n	80017b8 <game_over+0x22>
		}
	}
//	disp1color_DrawString(7, 0, FONTID_6X8M, pMyStr);
//	disp1color_DrawString(5, 8, FONTID_6X8M, pMyStr2);
}
 800181a:	bf00      	nop
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800182c:	e7fe      	b.n	800182c <Error_Handler+0x8>

0800182e <median_filter_init>:
#include "median.h"

void median_filter_init(median_filter_t* filter) {
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
    memset(filter->data, 0, sizeof(filter->data));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2210      	movs	r2, #16
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f002 feab 	bl	8004598 <memset>
    memset(filter->sorted, 0, sizeof(filter->sorted));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3310      	adds	r3, #16
 8001846:	2210      	movs	r2, #16
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fea4 	bl	8004598 <memset>
    filter->index = 0;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <MX_SPI1_Init+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_SPI1_Init+0x64>)
 800186c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_SPI1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_SPI1_Init+0x64>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001894:	2208      	movs	r2, #8
 8001896:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_SPI1_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018ac:	220a      	movs	r2, #10
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018b2:	f001 fe81 	bl	80035b8 <HAL_SPI_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018bc:	f7ff ffb2 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200002a0 	.word	0x200002a0
 80018c8:	40013000 	.word	0x40013000

080018cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_SPI_MspInit+0x84>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d12b      	bne.n	8001946 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_SPI_MspInit+0x88>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_SPI_MspInit+0x88>)
 80018f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_SPI_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001926:	23a0      	movs	r3, #160	; 0xa0
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001936:	2305      	movs	r3, #5
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_SPI_MspInit+0x8c>)
 8001942:	f001 f877 	bl	8002a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40013000 	.word	0x40013000
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000

0800195c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <HAL_MspInit+0x4c>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_MspInit+0x4c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f8:	f000 faf8 	bl	8001fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//y0_bird = FlappyBird_update(&FlappyBird, volume);
	if (counter_wall > 0 && counter_wall < 40) {
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <TIM1_UP_TIM10_IRQHandler+0xa8>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d02b      	beq.n	8001a64 <TIM1_UP_TIM10_IRQHandler+0x64>
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <TIM1_UP_TIM10_IRQHandler+0xa8>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b27      	cmp	r3, #39	; 0x27
 8001a12:	d827      	bhi.n	8001a64 <TIM1_UP_TIM10_IRQHandler+0x64>
		rectangle_y1 = rectangle_y1_array[counter_mode];
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <TIM1_UP_TIM10_IRQHandler+0xac>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <TIM1_UP_TIM10_IRQHandler+0xb0>)
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <TIM1_UP_TIM10_IRQHandler+0xb4>)
 8001a24:	701a      	strb	r2, [r3, #0]
		rectangle_y2 = rectangle_y2_array[counter_mode];
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <TIM1_UP_TIM10_IRQHandler+0xac>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <TIM1_UP_TIM10_IRQHandler+0xb8>)
 8001a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <TIM1_UP_TIM10_IRQHandler+0xbc>)
 8001a36:	701a      	strb	r2, [r3, #0]
		disp1color_FillScreenbuff(0);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7fe ffc7 	bl	80009cc <disp1color_FillScreenbuff>
		rectangle_x1--;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <TIM1_UP_TIM10_IRQHandler+0xc0>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	b25a      	sxtb	r2, r3
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <TIM1_UP_TIM10_IRQHandler+0xc0>)
 8001a4e:	701a      	strb	r2, [r3, #0]
		rectangle_x2--;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <TIM1_UP_TIM10_IRQHandler+0xc4>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <TIM1_UP_TIM10_IRQHandler+0xc4>)
 8001a60:	701a      	strb	r2, [r3, #0]
	if (counter_wall > 0 && counter_wall < 40) {
 8001a62:	e00e      	b.n	8001a82 <TIM1_UP_TIM10_IRQHandler+0x82>
		}
		else{
			counter_wall = 0;
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <TIM1_UP_TIM10_IRQHandler+0xa8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
			rectangle_x1 = 31;
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <TIM1_UP_TIM10_IRQHandler+0xc0>)
 8001a6c:	221f      	movs	r2, #31
 8001a6e:	701a      	strb	r2, [r3, #0]
			rectangle_x2 = 35;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <TIM1_UP_TIM10_IRQHandler+0xc4>)
 8001a72:	2223      	movs	r2, #35	; 0x23
 8001a74:	701a      	strb	r2, [r3, #0]
			counter_mode++;
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <TIM1_UP_TIM10_IRQHandler+0xac>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <TIM1_UP_TIM10_IRQHandler+0xac>)
 8001a80:	701a      	strb	r2, [r3, #0]
		}
		if(counter_mode == 11){counter_mode = 0;}
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <TIM1_UP_TIM10_IRQHandler+0xac>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b0b      	cmp	r3, #11
 8001a88:	d102      	bne.n	8001a90 <TIM1_UP_TIM10_IRQHandler+0x90>
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <TIM1_UP_TIM10_IRQHandler+0xac>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
	counter_wall++;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <TIM1_UP_TIM10_IRQHandler+0xa8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <TIM1_UP_TIM10_IRQHandler+0xa8>)
 8001a9a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a9c:	480a      	ldr	r0, [pc, #40]	; (8001ac8 <TIM1_UP_TIM10_IRQHandler+0xc8>)
 8001a9e:	f002 f8cc 	bl	8003c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200002f8 	.word	0x200002f8
 8001aac:	200002f9 	.word	0x200002f9
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	20000233 	.word	0x20000233
 8001ab8:	20000030 	.word	0x20000030
 8001abc:	20000235 	.word	0x20000235
 8001ac0:	20000232 	.word	0x20000232
 8001ac4:	20000234 	.word	0x20000234
 8001ac8:	20000300 	.word	0x20000300

08001acc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	y0_bird = FlappyBird_update(&FlappyBird, volume);
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <TIM2_IRQHandler+0x24>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b21b      	sxth	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4806      	ldr	r0, [pc, #24]	; (8001af4 <TIM2_IRQHandler+0x28>)
 8001ada:	f7fe fd6d 	bl	80005b8 <FlappyBird_update>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <TIM2_IRQHandler+0x2c>)
 8001ae4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <TIM2_IRQHandler+0x30>)
 8001ae8:	f002 f8a7 	bl	8003c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000029a 	.word	0x2000029a
 8001af4:	2000025c 	.word	0x2000025c
 8001af8:	20000230 	.word	0x20000230
 8001afc:	20000348 	.word	0x20000348

08001b00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_ADC_Start(&hadc1);
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <TIM3_IRQHandler+0x38>)
 8001b06:	f000 fad5 	bl	80020b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001b0a:	210a      	movs	r1, #10
 8001b0c:	480a      	ldr	r0, [pc, #40]	; (8001b38 <TIM3_IRQHandler+0x38>)
 8001b0e:	f000 fbb8 	bl	8002282 <HAL_ADC_PollForConversion>
	volume = (uint16_t) (HAL_ADC_GetValue(&hadc1) - 1700);
 8001b12:	4809      	ldr	r0, [pc, #36]	; (8001b38 <TIM3_IRQHandler+0x38>)
 8001b14:	f000 fc40 	bl	8002398 <HAL_ADC_GetValue>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <TIM3_IRQHandler+0x3c>)
 8001b26:	801a      	strh	r2, [r3, #0]
//	adc_reg_value = (uint16_t) HAL_ADC_GetValue(&hadc1);
//	MIC_median_filter = median_filter_update(&median_filter_MIC, adc_reg_value);
//	volume = (MIC_median_filter - 1700);
//
	HAL_ADC_Stop(&hadc1);
 8001b28:	4803      	ldr	r0, [pc, #12]	; (8001b38 <TIM3_IRQHandler+0x38>)
 8001b2a:	f000 fb77 	bl	800221c <HAL_ADC_Stop>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b2e:	4804      	ldr	r0, [pc, #16]	; (8001b40 <TIM3_IRQHandler+0x40>)
 8001b30:	f002 f883 	bl	8003c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200000e8 	.word	0x200000e8
 8001b3c:	2000029a 	.word	0x2000029a
 8001b40:	20000390 	.word	0x20000390

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f002 fcd8 	bl	8004528 <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20020000 	.word	0x20020000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	200002fc 	.word	0x200002fc
 8001bac:	200003f0 	.word	0x200003f0

08001bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <SystemInit+0x20>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <SystemInit+0x20>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b092      	sub	sp, #72	; 0x48
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fcca 	bl	8004598 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001c06:	4a33      	ldr	r2, [pc, #204]	; (8001cd4 <MX_TIM1_Init+0x100>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001c0a:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001c0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c12:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9600-1;
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001c1a:	f242 527f 	movw	r2, #9599	; 0x257f
 8001c1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2c:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001c32:	4827      	ldr	r0, [pc, #156]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001c34:	f001 ffb2 	bl	8003b9c <HAL_TIM_OC_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c3e:	f7ff fdf1 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c4e:	4619      	mov	r1, r3
 8001c50:	481f      	ldr	r0, [pc, #124]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001c52:	f002 fb95 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001c5c:	f7ff fde2 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001c86:	f002 f8e1 	bl	8003e4c <HAL_TIM_OC_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001c90:	f7ff fdc8 	bl	8001824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <MX_TIM1_Init+0xfc>)
 8001cb8:	f002 fbd0 	bl	800445c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001cc2:	f7ff fdaf 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	3748      	adds	r7, #72	; 0x48
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000300 	.word	0x20000300
 8001cd4:	40010000 	.word	0x40010000

08001cd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cde:	f107 0320 	add.w	r3, r7, #32
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	615a      	str	r2, [r3, #20]
 8001cf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <MX_TIM2_Init+0xa8>)
 8001cfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <MX_TIM2_Init+0xa8>)
 8001d04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <MX_TIM2_Init+0xa8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <MX_TIM2_Init+0xa8>)
 8001d12:	f240 623f 	movw	r2, #1599	; 0x63f
 8001d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <MX_TIM2_Init+0xa8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <MX_TIM2_Init+0xa8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001d24:	4816      	ldr	r0, [pc, #88]	; (8001d80 <MX_TIM2_Init+0xa8>)
 8001d26:	f001 ff39 	bl	8003b9c <HAL_TIM_OC_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001d30:	f7ff fd78 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	4619      	mov	r1, r3
 8001d42:	480f      	ldr	r0, [pc, #60]	; (8001d80 <MX_TIM2_Init+0xa8>)
 8001d44:	f002 fb1c 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001d4e:	f7ff fd69 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	4619      	mov	r1, r3
 8001d68:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_TIM2_Init+0xa8>)
 8001d6a:	f002 f86f 	bl	8003e4c <HAL_TIM_OC_ConfigChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001d74:	f7ff fd56 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000348 	.word	0x20000348

08001d84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <MX_TIM3_Init+0xa4>)
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001daa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6-1;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_TIM3_Init+0xa4>)
 8001dae:	2205      	movs	r2, #5
 8001db0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <MX_TIM3_Init+0xa4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000-1;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <MX_TIM3_Init+0xa4>)
 8001dba:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001dbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MX_TIM3_Init+0xa4>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <MX_TIM3_Init+0xa4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001dcc:	4816      	ldr	r0, [pc, #88]	; (8001e28 <MX_TIM3_Init+0xa4>)
 8001dce:	f001 fee5 	bl	8003b9c <HAL_TIM_OC_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001dd8:	f7ff fd24 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de4:	f107 0320 	add.w	r3, r7, #32
 8001de8:	4619      	mov	r1, r3
 8001dea:	480f      	ldr	r0, [pc, #60]	; (8001e28 <MX_TIM3_Init+0xa4>)
 8001dec:	f002 fac8 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001df6:	f7ff fd15 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_TIM3_Init+0xa4>)
 8001e12:	f002 f81b 	bl	8003e4c <HAL_TIM_OC_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e1c:	f7ff fd02 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	; 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000390 	.word	0x20000390
 8001e2c:	40000400 	.word	0x40000400

08001e30 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ee8 <HAL_TIM_OC_MspInit+0xb8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d116      	bne.n	8001e70 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_TIM_OC_MspInit+0xbc>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a28      	ldr	r2, [pc, #160]	; (8001eec <HAL_TIM_OC_MspInit+0xbc>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_TIM_OC_MspInit+0xbc>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2019      	movs	r0, #25
 8001e64:	f000 fdaf 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e68:	2019      	movs	r0, #25
 8001e6a:	f000 fdc8 	bl	80029fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e6e:	e036      	b.n	8001ede <HAL_TIM_OC_MspInit+0xae>
  else if(tim_ocHandle->Instance==TIM2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e78:	d116      	bne.n	8001ea8 <HAL_TIM_OC_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_TIM_OC_MspInit+0xbc>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <HAL_TIM_OC_MspInit+0xbc>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_TIM_OC_MspInit+0xbc>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	201c      	movs	r0, #28
 8001e9c:	f000 fd93 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea0:	201c      	movs	r0, #28
 8001ea2:	f000 fdac 	bl	80029fe <HAL_NVIC_EnableIRQ>
}
 8001ea6:	e01a      	b.n	8001ede <HAL_TIM_OC_MspInit+0xae>
  else if(tim_ocHandle->Instance==TIM3)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <HAL_TIM_OC_MspInit+0xc0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d115      	bne.n	8001ede <HAL_TIM_OC_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_TIM_OC_MspInit+0xbc>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_TIM_OC_MspInit+0xbc>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_TIM_OC_MspInit+0xbc>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	201d      	movs	r0, #29
 8001ed4:	f000 fd77 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ed8:	201d      	movs	r0, #29
 8001eda:	f000 fd90 	bl	80029fe <HAL_NVIC_EnableIRQ>
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40000400 	.word	0x40000400

08001ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001efa:	490e      	ldr	r1, [pc, #56]	; (8001f34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f10:	4c0b      	ldr	r4, [pc, #44]	; (8001f40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f1e:	f7ff fe47 	bl	8001bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f22:	f002 fb07 	bl	8004534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f26:	f7ff f9ed 	bl	8001304 <main>
  bx  lr    
 8001f2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f34:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001f38:	08007b94 	.word	0x08007b94
  ldr r2, =_sbss
 8001f3c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001f40:	200003ec 	.word	0x200003ec

08001f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC_IRQHandler>
	...

08001f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <HAL_Init+0x40>)
 8001f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_Init+0x40>)
 8001f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a07      	ldr	r2, [pc, #28]	; (8001f88 <HAL_Init+0x40>)
 8001f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f70:	2003      	movs	r0, #3
 8001f72:	f000 fd1d 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f76:	2000      	movs	r0, #0
 8001f78:	f000 f808 	bl	8001f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f7c:	f7ff fcee 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023c00 	.word	0x40023c00

08001f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_InitTick+0x54>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_InitTick+0x58>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fd35 	bl	8002a1a <HAL_SYSTICK_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00e      	b.n	8001fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	d80a      	bhi.n	8001fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f000 fcfd 	bl	80029c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fcc:	4a06      	ldr	r2, [pc, #24]	; (8001fe8 <HAL_InitTick+0x5c>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	2000005c 	.word	0x2000005c
 8001fe4:	20000064 	.word	0x20000064
 8001fe8:	20000060 	.word	0x20000060

08001fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x20>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x24>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_IncTick+0x24>)
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000064 	.word	0x20000064
 8002010:	200003d8 	.word	0x200003d8

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	200003d8 	.word	0x200003d8

0800202c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e033      	b.n	80020aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fc7a 	bl	8000944 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002072:	f023 0302 	bic.w	r3, r3, #2
 8002076:	f043 0202 	orr.w	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 faca 	bl	8002618 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f023 0303 	bic.w	r3, r3, #3
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
 800209a:	e001      	b.n	80020a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Start+0x1a>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e097      	b.n	80021fe <HAL_ADC_Start+0x14a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d018      	beq.n	8002116 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020f4:	4b45      	ldr	r3, [pc, #276]	; (800220c <HAL_ADC_Start+0x158>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a45      	ldr	r2, [pc, #276]	; (8002210 <HAL_ADC_Start+0x15c>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9a      	lsrs	r2, r3, #18
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002108:	e002      	b.n	8002110 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3b01      	subs	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f9      	bne.n	800210a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d15f      	bne.n	80021e4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800214e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002162:	d106      	bne.n	8002172 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	f023 0206 	bic.w	r2, r3, #6
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
 8002170:	e002      	b.n	8002178 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_ADC_Start+0x160>)
 8002182:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800218c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10f      	bne.n	80021ba <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d129      	bne.n	80021fc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e020      	b.n	80021fc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a16      	ldr	r2, [pc, #88]	; (8002218 <HAL_ADC_Start+0x164>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d11b      	bne.n	80021fc <HAL_ADC_Start+0x148>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d114      	bne.n	80021fc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	e00b      	b.n	80021fc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f043 0210 	orr.w	r2, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	2000005c 	.word	0x2000005c
 8002210:	431bde83 	.word	0x431bde83
 8002214:	40012300 	.word	0x40012300
 8002218:	40012000 	.word	0x40012000

0800221c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_ADC_Stop+0x16>
 800222e:	2302      	movs	r3, #2
 8002230:	e021      	b.n	8002276 <HAL_ADC_Stop+0x5a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229e:	d113      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ae:	d10b      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e063      	b.n	8002390 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80022c8:	f7ff fea4 	bl	8002014 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022ce:	e021      	b.n	8002314 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d6:	d01d      	beq.n	8002314 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_ADC_PollForConversion+0x6c>
 80022de:	f7ff fe99 	bl	8002014 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d212      	bcs.n	8002314 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d00b      	beq.n	8002314 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f043 0204 	orr.w	r2, r3, #4
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e03d      	b.n	8002390 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b02      	cmp	r3, #2
 8002320:	d1d6      	bne.n	80022d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f06f 0212 	mvn.w	r2, #18
 800232a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d123      	bne.n	800238e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11f      	bne.n	800238e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002366:	2b00      	cmp	r3, #0
 8002368:	d111      	bne.n	800238e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x1c>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e113      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x244>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b09      	cmp	r3, #9
 80023de:	d925      	bls.n	800242c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68d9      	ldr	r1, [r3, #12]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	3b1e      	subs	r3, #30
 80023f6:	2207      	movs	r2, #7
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43da      	mvns	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	400a      	ands	r2, r1
 8002404:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68d9      	ldr	r1, [r3, #12]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	4618      	mov	r0, r3
 8002418:	4603      	mov	r3, r0
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4403      	add	r3, r0
 800241e:	3b1e      	subs	r3, #30
 8002420:	409a      	lsls	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	e022      	b.n	8002472 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6919      	ldr	r1, [r3, #16]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	2207      	movs	r2, #7
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	400a      	ands	r2, r1
 800244e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6919      	ldr	r1, [r3, #16]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	4603      	mov	r3, r0
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4403      	add	r3, r0
 8002468:	409a      	lsls	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b06      	cmp	r3, #6
 8002478:	d824      	bhi.n	80024c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	3b05      	subs	r3, #5
 800248c:	221f      	movs	r2, #31
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	400a      	ands	r2, r1
 800249a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	3b05      	subs	r3, #5
 80024b6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	635a      	str	r2, [r3, #52]	; 0x34
 80024c2:	e04c      	b.n	800255e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d824      	bhi.n	8002516 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b23      	subs	r3, #35	; 0x23
 80024de:	221f      	movs	r2, #31
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43da      	mvns	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	400a      	ands	r2, r1
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	3b23      	subs	r3, #35	; 0x23
 8002508:	fa00 f203 	lsl.w	r2, r0, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
 8002514:	e023      	b.n	800255e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3b41      	subs	r3, #65	; 0x41
 8002528:	221f      	movs	r2, #31
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	400a      	ands	r2, r1
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	4618      	mov	r0, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3b41      	subs	r3, #65	; 0x41
 8002552:	fa00 f203 	lsl.w	r2, r0, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800255e:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_ADC_ConfigChannel+0x250>)
 8002560:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a28      	ldr	r2, [pc, #160]	; (8002608 <HAL_ADC_ConfigChannel+0x254>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d10f      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1d8>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b12      	cmp	r3, #18
 8002572:	d10b      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_ADC_ConfigChannel+0x254>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d12b      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x23a>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_ADC_ConfigChannel+0x258>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d003      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0x1f4>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b11      	cmp	r3, #17
 80025a6:	d122      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_ADC_ConfigChannel+0x258>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d111      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_ADC_ConfigChannel+0x25c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_ADC_ConfigChannel+0x260>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	0c9a      	lsrs	r2, r3, #18
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025e0:	e002      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f9      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40012300 	.word	0x40012300
 8002608:	40012000 	.word	0x40012000
 800260c:	10000012 	.word	0x10000012
 8002610:	2000005c 	.word	0x2000005c
 8002614:	431bde83 	.word	0x431bde83

08002618 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002620:	4b79      	ldr	r3, [pc, #484]	; (8002808 <ADC_Init+0x1f0>)
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	431a      	orrs	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	021a      	lsls	r2, r3, #8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6899      	ldr	r1, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	4a58      	ldr	r2, [pc, #352]	; (800280c <ADC_Init+0x1f4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d022      	beq.n	80026f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	e00f      	b.n	8002716 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002714:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0202 	bic.w	r2, r2, #2
 8002724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6899      	ldr	r1, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7e1b      	ldrb	r3, [r3, #24]
 8002730:	005a      	lsls	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002752:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002762:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6859      	ldr	r1, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	3b01      	subs	r3, #1
 8002770:	035a      	lsls	r2, r3, #13
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	e007      	b.n	800278c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800278a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	051a      	lsls	r2, r3, #20
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027ce:	025a      	lsls	r2, r3, #9
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	029a      	lsls	r2, r3, #10
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40012300 	.word	0x40012300
 800280c:	0f000001 	.word	0x0f000001

08002810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800283c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002842:	4a04      	ldr	r2, [pc, #16]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	60d3      	str	r3, [r2, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db0b      	blt.n	800289e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <__NVIC_EnableIRQ+0x38>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	; (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800297c:	d301      	bcc.n	8002982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <SysTick_Config+0x40>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f7ff ff8e 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <SysTick_Config+0x40>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299a:	4b04      	ldr	r3, [pc, #16]	; (80029ac <SysTick_Config+0x40>)
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff29 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d8:	f7ff ff3e 	bl	8002858 <__NVIC_GetPriorityGrouping>
 80029dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f7ff ff8e 	bl	8002904 <NVIC_EncodePriority>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff5d 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff31 	bl	8002874 <__NVIC_EnableIRQ>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffa2 	bl	800296c <SysTick_Config>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e159      	b.n	8002d04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 8148 	bne.w	8002cfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d005      	beq.n	8002a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d130      	bne.n	8002ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 0201 	and.w	r2, r3, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d017      	beq.n	8002b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d123      	bne.n	8002b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a2 	beq.w	8002cfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_GPIO_Init+0x2e8>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	4a56      	ldr	r2, [pc, #344]	; (8002d1c <HAL_GPIO_Init+0x2e8>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bca:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <HAL_GPIO_Init+0x2e8>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd6:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_GPIO_Init+0x2ec>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a49      	ldr	r2, [pc, #292]	; (8002d24 <HAL_GPIO_Init+0x2f0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d019      	beq.n	8002c36 <HAL_GPIO_Init+0x202>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a48      	ldr	r2, [pc, #288]	; (8002d28 <HAL_GPIO_Init+0x2f4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_GPIO_Init+0x1fe>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a47      	ldr	r2, [pc, #284]	; (8002d2c <HAL_GPIO_Init+0x2f8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00d      	beq.n	8002c2e <HAL_GPIO_Init+0x1fa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a46      	ldr	r2, [pc, #280]	; (8002d30 <HAL_GPIO_Init+0x2fc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <HAL_GPIO_Init+0x1f6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a45      	ldr	r2, [pc, #276]	; (8002d34 <HAL_GPIO_Init+0x300>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_GPIO_Init+0x1f2>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e008      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c26:	2307      	movs	r3, #7
 8002c28:	e006      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e004      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e002      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c36:	2300      	movs	r3, #0
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f002 0203 	and.w	r2, r2, #3
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	4093      	lsls	r3, r2
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c48:	4935      	ldr	r1, [pc, #212]	; (8002d20 <HAL_GPIO_Init+0x2ec>)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c56:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c7a:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca4:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002caa:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cce:	4a1a      	ldr	r2, [pc, #104]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd4:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf8:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3301      	adds	r3, #1
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b0f      	cmp	r3, #15
 8002d08:	f67f aea2 	bls.w	8002a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40013800 	.word	0x40013800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020400 	.word	0x40020400
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40013c00 	.word	0x40013c00

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d58:	e003      	b.n	8002d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	041a      	lsls	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	619a      	str	r2, [r3, #24]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e267      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d075      	beq.n	8002e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4b85      	ldr	r3, [pc, #532]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d112      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	4b7e      	ldr	r3, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05b      	beq.n	8002e78 <HAL_RCC_OscConfig+0x108>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d157      	bne.n	8002e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e242      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x74>
 8002dd6:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a75      	ldr	r2, [pc, #468]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x98>
 8002dee:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6f      	ldr	r2, [pc, #444]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6c      	ldr	r2, [pc, #432]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002e08:	4b69      	ldr	r3, [pc, #420]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a68      	ldr	r2, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f8f4 	bl	8002014 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e30:	f7ff f8f0 	bl	8002014 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e207      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xc0>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7ff f8e0 	bl	8002014 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e58:	f7ff f8dc 	bl	8002014 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1f3      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0xe8>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d11c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1c7      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4937      	ldr	r1, [pc, #220]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	e03a      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee0:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7ff f895 	bl	8002014 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eee:	f7ff f891 	bl	8002014 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1a8      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4925      	ldr	r1, [pc, #148]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7ff f874 	bl	8002014 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f30:	f7ff f870 	bl	8002014 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e187      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d036      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7ff f854 	bl	8002014 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f70:	f7ff f850 	bl	8002014 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e167      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x200>
 8002f8e:	e01b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7ff f83d 	bl	8002014 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	e00e      	b.n	8002fbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7ff f839 	bl	8002014 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d907      	bls.n	8002fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e150      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	42470000 	.word	0x42470000
 8002fb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b88      	ldr	r3, [pc, #544]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ea      	bne.n	8002f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8097 	beq.w	8003104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b81      	ldr	r3, [pc, #516]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10f      	bne.n	8003006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	4b7d      	ldr	r3, [pc, #500]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a7c      	ldr	r2, [pc, #496]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b7a      	ldr	r3, [pc, #488]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003006:	4b77      	ldr	r3, [pc, #476]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d118      	bne.n	8003044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003012:	4b74      	ldr	r3, [pc, #464]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a73      	ldr	r2, [pc, #460]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301e:	f7fe fff9 	bl	8002014 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003026:	f7fe fff5 	bl	8002014 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e10c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x2ea>
 800304c:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
 8003058:	e01c      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x30c>
 8003062:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a5e      	ldr	r2, [pc, #376]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	4a5b      	ldr	r2, [pc, #364]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6713      	str	r3, [r2, #112]	; 0x70
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800307c:	4b58      	ldr	r3, [pc, #352]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a57      	ldr	r2, [pc, #348]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	4b55      	ldr	r3, [pc, #340]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a54      	ldr	r2, [pc, #336]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308e:	f023 0304 	bic.w	r3, r3, #4
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe ffba 	bl	8002014 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7fe ffb6 	bl	8002014 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0cb      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ee      	beq.n	80030a4 <HAL_RCC_OscConfig+0x334>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe ffa4 	bl	8002014 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe ffa0 	bl	8002014 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0b5      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e6:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ee      	bne.n	80030d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	4a38      	ldr	r2, [pc, #224]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a1 	beq.w	8003250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310e:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b08      	cmp	r3, #8
 8003118:	d05c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d141      	bne.n	80031a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe ff74 	bl	8002014 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe ff70 	bl	8002014 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e087      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	3b01      	subs	r3, #1
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	061b      	lsls	r3, r3, #24
 8003172:	491b      	ldr	r1, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe ff49 	bl	8002014 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe ff45 	bl	8002014 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e05c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x416>
 80031a4:	e054      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe ff32 	bl	8002014 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe ff2e 	bl	8002014 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e045      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x444>
 80031d2:	e03d      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e038      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCC_OscConfig+0x4ec>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d028      	beq.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d121      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d11a      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003224:	4293      	cmp	r3, r2
 8003226:	d111      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0cc      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d90c      	bls.n	800329c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b65      	ldr	r3, [pc, #404]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b63      	ldr	r3, [pc, #396]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0b8      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a52      	ldr	r2, [pc, #328]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	494d      	ldr	r1, [pc, #308]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d044      	beq.n	8003380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d119      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d003      	beq.n	800331e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331a:	2b03      	cmp	r3, #3
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e067      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4934      	ldr	r1, [pc, #208]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003350:	f7fe fe60 	bl	8002014 <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fe fe5c 	bl	8002014 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 020c 	and.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	429a      	cmp	r2, r3
 800337e:	d1eb      	bne.n	8003358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d20c      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e032      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4916      	ldr	r1, [pc, #88]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	490e      	ldr	r1, [pc, #56]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e6:	f000 f821 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	490a      	ldr	r1, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	5ccb      	ldrb	r3, [r1, r3]
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1c8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe fdc0 	bl	8001f8c <HAL_InitTick>

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023c00 	.word	0x40023c00
 800341c:	40023800 	.word	0x40023800
 8003420:	08007ae0 	.word	0x08007ae0
 8003424:	2000005c 	.word	0x2000005c
 8003428:	20000060 	.word	0x20000060

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003430:	b090      	sub	sp, #64	; 0x40
 8003432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
 8003438:	2300      	movs	r3, #0
 800343a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343c:	2300      	movs	r3, #0
 800343e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d00d      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x40>
 8003450:	2b08      	cmp	r3, #8
 8003452:	f200 80a1 	bhi.w	8003598 <HAL_RCC_GetSysClockFreq+0x16c>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x34>
 800345a:	2b04      	cmp	r3, #4
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x3a>
 800345e:	e09b      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003460:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003462:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003464:	e09b      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003466:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003468:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800346a:	e098      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4b4f      	ldr	r3, [pc, #316]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003476:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d028      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	627a      	str	r2, [r7, #36]	; 0x24
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003494:	2100      	movs	r1, #0
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003498:	fb03 f201 	mul.w	r2, r3, r1
 800349c:	2300      	movs	r3, #0
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	4a43      	ldr	r2, [pc, #268]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034a6:	fba0 1202 	umull	r1, r2, r0, r2
 80034aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ac:	460a      	mov	r2, r1
 80034ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80034b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b2:	4413      	add	r3, r2
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	2200      	movs	r2, #0
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	61fa      	str	r2, [r7, #28]
 80034be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034c6:	f7fc fee3 	bl	8000290 <__aeabi_uldivmod>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4613      	mov	r3, r2
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d2:	e053      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d4:	4b35      	ldr	r3, [pc, #212]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	2200      	movs	r2, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	617a      	str	r2, [r7, #20]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034e6:	f04f 0b00 	mov.w	fp, #0
 80034ea:	4652      	mov	r2, sl
 80034ec:	465b      	mov	r3, fp
 80034ee:	f04f 0000 	mov.w	r0, #0
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	0159      	lsls	r1, r3, #5
 80034f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fc:	0150      	lsls	r0, r2, #5
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	ebb2 080a 	subs.w	r8, r2, sl
 8003506:	eb63 090b 	sbc.w	r9, r3, fp
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003516:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800351a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800351e:	ebb2 0408 	subs.w	r4, r2, r8
 8003522:	eb63 0509 	sbc.w	r5, r3, r9
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	00eb      	lsls	r3, r5, #3
 8003530:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003534:	00e2      	lsls	r2, r4, #3
 8003536:	4614      	mov	r4, r2
 8003538:	461d      	mov	r5, r3
 800353a:	eb14 030a 	adds.w	r3, r4, sl
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	eb45 030b 	adc.w	r3, r5, fp
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003552:	4629      	mov	r1, r5
 8003554:	028b      	lsls	r3, r1, #10
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800355c:	4621      	mov	r1, r4
 800355e:	028a      	lsls	r2, r1, #10
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003566:	2200      	movs	r2, #0
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	60fa      	str	r2, [r7, #12]
 800356c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003570:	f7fc fe8e 	bl	8000290 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800358c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3740      	adds	r7, #64	; 0x40
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	017d7840 	.word	0x017d7840

080035b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07b      	b.n	80036c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d108      	bne.n	80035e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035da:	d009      	beq.n	80035f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	61da      	str	r2, [r3, #28]
 80035e2:	e005      	b.n	80035f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe f95e 	bl	80018cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	ea42 0103 	orr.w	r1, r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f003 0104 	and.w	r1, r3, #4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f003 0210 	and.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b088      	sub	sp, #32
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_SPI_Transmit+0x22>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e126      	b.n	800393a <HAL_SPI_Transmit+0x270>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036f4:	f7fe fc8e 	bl	8002014 <HAL_GetTick>
 80036f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d002      	beq.n	8003710 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800370a:	2302      	movs	r3, #2
 800370c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800370e:	e10b      	b.n	8003928 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_SPI_Transmit+0x52>
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003720:	e102      	b.n	8003928 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2203      	movs	r2, #3
 8003726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	88fa      	ldrh	r2, [r7, #6]
 8003740:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003768:	d10f      	bne.n	800378a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003788:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d007      	beq.n	80037a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b0:	d14b      	bne.n	800384a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Transmit+0xf6>
 80037ba:	8afb      	ldrh	r3, [r7, #22]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d13e      	bne.n	800383e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037e4:	e02b      	b.n	800383e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d112      	bne.n	800381a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	86da      	strh	r2, [r3, #54]	; 0x36
 8003818:	e011      	b.n	800383e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381a:	f7fe fbfb 	bl	8002014 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d803      	bhi.n	8003832 <HAL_SPI_Transmit+0x168>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d102      	bne.n	8003838 <HAL_SPI_Transmit+0x16e>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800383c:	e074      	b.n	8003928 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ce      	bne.n	80037e6 <HAL_SPI_Transmit+0x11c>
 8003848:	e04c      	b.n	80038e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Transmit+0x18e>
 8003852:	8afb      	ldrh	r3, [r7, #22]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d140      	bne.n	80038da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	7812      	ldrb	r2, [r2, #0]
 8003864:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800387e:	e02c      	b.n	80038da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b02      	cmp	r3, #2
 800388c:	d113      	bne.n	80038b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	7812      	ldrb	r2, [r2, #0]
 800389a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80038b4:	e011      	b.n	80038da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b6:	f7fe fbad 	bl	8002014 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d803      	bhi.n	80038ce <HAL_SPI_Transmit+0x204>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d102      	bne.n	80038d4 <HAL_SPI_Transmit+0x20a>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038d8:	e026      	b.n	8003928 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1cd      	bne.n	8003880 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f8b3 	bl	8003a54 <SPI_EndRxTxTransaction>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e000      	b.n	8003928 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003926:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003938:	7ffb      	ldrb	r3, [r7, #31]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003954:	f7fe fb5e 	bl	8002014 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	4413      	add	r3, r2
 8003962:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003964:	f7fe fb56 	bl	8002014 <HAL_GetTick>
 8003968:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800396a:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	015b      	lsls	r3, r3, #5
 8003970:	0d1b      	lsrs	r3, r3, #20
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800397a:	e054      	b.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d050      	beq.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003984:	f7fe fb46 	bl	8002014 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	429a      	cmp	r2, r3
 8003992:	d902      	bls.n	800399a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d13d      	bne.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039b2:	d111      	bne.n	80039d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039bc:	d004      	beq.n	80039c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c6:	d107      	bne.n	80039d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e0:	d10f      	bne.n	8003a02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e017      	b.n	8003a46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	bf0c      	ite	eq
 8003a36:	2301      	moveq	r3, #1
 8003a38:	2300      	movne	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d19b      	bne.n	800397c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	2000005c 	.word	0x2000005c

08003a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <SPI_EndRxTxTransaction+0x7c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1b      	ldr	r2, [pc, #108]	; (8003ad4 <SPI_EndRxTxTransaction+0x80>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	0d5b      	lsrs	r3, r3, #21
 8003a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a70:	fb02 f303 	mul.w	r3, r2, r3
 8003a74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7e:	d112      	bne.n	8003aa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2200      	movs	r2, #0
 8003a88:	2180      	movs	r1, #128	; 0x80
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff ff5a 	bl	8003944 <SPI_WaitFlagStateUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e00f      	b.n	8003ac6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d0f2      	beq.n	8003aa6 <SPI_EndRxTxTransaction+0x52>
 8003ac0:	e000      	b.n	8003ac4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ac2:	bf00      	nop
  }

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000005c 	.word	0x2000005c
 8003ad4:	165e9f81 	.word	0x165e9f81

08003ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d001      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e044      	b.n	8003b7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d018      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x6c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1a:	d013      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x6c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1a      	ldr	r2, [pc, #104]	; (8003b8c <HAL_TIM_Base_Start_IT+0xb4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00e      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x6c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x6c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x6c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d111      	bne.n	8003b68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d010      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	e007      	b.n	8003b78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40014000 	.word	0x40014000

08003b9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e041      	b.n	8003c32 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe f934 	bl	8001e30 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f000 f9c4 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d122      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d11b      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f06f 0202 	mvn.w	r2, #2
 8003c66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f955 	bl	8003f2c <HAL_TIM_IC_CaptureCallback>
 8003c82:	e005      	b.n	8003c90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f947 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f958 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d122      	bne.n	8003cea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d11b      	bne.n	8003cea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0204 	mvn.w	r2, #4
 8003cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f92b 	bl	8003f2c <HAL_TIM_IC_CaptureCallback>
 8003cd6:	e005      	b.n	8003ce4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f91d 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f92e 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d122      	bne.n	8003d3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d11b      	bne.n	8003d3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f06f 0208 	mvn.w	r2, #8
 8003d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2204      	movs	r2, #4
 8003d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f901 	bl	8003f2c <HAL_TIM_IC_CaptureCallback>
 8003d2a:	e005      	b.n	8003d38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f8f3 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f904 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d122      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b10      	cmp	r3, #16
 8003d58:	d11b      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f06f 0210 	mvn.w	r2, #16
 8003d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2208      	movs	r2, #8
 8003d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f8d7 	bl	8003f2c <HAL_TIM_IC_CaptureCallback>
 8003d7e:	e005      	b.n	8003d8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f8c9 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8da 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d10e      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0201 	mvn.w	r2, #1
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f8a3 	bl	8003f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d10e      	bne.n	8003dea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	2b80      	cmp	r3, #128	; 0x80
 8003dd8:	d107      	bne.n	8003dea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fb95 	bl	8004514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d10e      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d107      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f89f 	bl	8003f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d10e      	bne.n	8003e42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d107      	bne.n	8003e42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f06f 0220 	mvn.w	r2, #32
 8003e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb5f 	bl	8004500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e048      	b.n	8003efc <HAL_TIM_OC_ConfigChannel+0xb0>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b0c      	cmp	r3, #12
 8003e76:	d839      	bhi.n	8003eec <HAL_TIM_OC_ConfigChannel+0xa0>
 8003e78:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003eb5 	.word	0x08003eb5
 8003e84:	08003eed 	.word	0x08003eed
 8003e88:	08003eed 	.word	0x08003eed
 8003e8c:	08003eed 	.word	0x08003eed
 8003e90:	08003ec3 	.word	0x08003ec3
 8003e94:	08003eed 	.word	0x08003eed
 8003e98:	08003eed 	.word	0x08003eed
 8003e9c:	08003eed 	.word	0x08003eed
 8003ea0:	08003ed1 	.word	0x08003ed1
 8003ea4:	08003eed 	.word	0x08003eed
 8003ea8:	08003eed 	.word	0x08003eed
 8003eac:	08003eed 	.word	0x08003eed
 8003eb0:	08003edf 	.word	0x08003edf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f8d4 	bl	8004068 <TIM_OC1_SetConfig>
      break;
 8003ec0:	e017      	b.n	8003ef2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 f933 	bl	8004134 <TIM_OC2_SetConfig>
      break;
 8003ece:	e010      	b.n	8003ef2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f998 	bl	800420c <TIM_OC3_SetConfig>
      break;
 8003edc:	e009      	b.n	8003ef2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 f9fb 	bl	80042e0 <TIM_OC4_SetConfig>
      break;
 8003eea:	e002      	b.n	8003ef2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a34      	ldr	r2, [pc, #208]	; (800404c <TIM_Base_SetConfig+0xe4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00f      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d00b      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a31      	ldr	r2, [pc, #196]	; (8004050 <TIM_Base_SetConfig+0xe8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a30      	ldr	r2, [pc, #192]	; (8004054 <TIM_Base_SetConfig+0xec>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <TIM_Base_SetConfig+0xf0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d108      	bne.n	8003fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0xe4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01b      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc0:	d017      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a22      	ldr	r2, [pc, #136]	; (8004050 <TIM_Base_SetConfig+0xe8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a21      	ldr	r2, [pc, #132]	; (8004054 <TIM_Base_SetConfig+0xec>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a20      	ldr	r2, [pc, #128]	; (8004058 <TIM_Base_SetConfig+0xf0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1f      	ldr	r2, [pc, #124]	; (800405c <TIM_Base_SetConfig+0xf4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <TIM_Base_SetConfig+0xf8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <TIM_Base_SetConfig+0xfc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <TIM_Base_SetConfig+0xe4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d103      	bne.n	8004038 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	615a      	str	r2, [r3, #20]
}
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40010000 	.word	0x40010000
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800
 8004058:	40000c00 	.word	0x40000c00
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800

08004068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f023 0201 	bic.w	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0303 	bic.w	r3, r3, #3
 800409e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f023 0302 	bic.w	r3, r3, #2
 80040b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <TIM_OC1_SetConfig+0xc8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d10c      	bne.n	80040de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0308 	bic.w	r3, r3, #8
 80040ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a13      	ldr	r2, [pc, #76]	; (8004130 <TIM_OC1_SetConfig+0xc8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000

08004134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0210 	bic.w	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0320 	bic.w	r3, r3, #32
 800417e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <TIM_OC2_SetConfig+0xd4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d10d      	bne.n	80041b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800419a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <TIM_OC2_SetConfig+0xd4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d113      	bne.n	80041e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40010000 	.word	0x40010000

0800420c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <TIM_OC3_SetConfig+0xd0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10d      	bne.n	8004286 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <TIM_OC3_SetConfig+0xd0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d113      	bne.n	80042b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	621a      	str	r2, [r3, #32]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40010000 	.word	0x40010000

080042e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800432a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a10      	ldr	r2, [pc, #64]	; (800437c <TIM_OC4_SetConfig+0x9c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d109      	bne.n	8004354 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	019b      	lsls	r3, r3, #6
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40010000 	.word	0x40010000

08004380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004394:	2302      	movs	r3, #2
 8004396:	e050      	b.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d013      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a16      	ldr	r2, [pc, #88]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a13      	ldr	r2, [pc, #76]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10c      	bne.n	8004428 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4313      	orrs	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40014000 	.word	0x40014000

0800445c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004474:	2302      	movs	r3, #2
 8004476:	e03d      	b.n	80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <__errno>:
 8004528:	4b01      	ldr	r3, [pc, #4]	; (8004530 <__errno+0x8>)
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	20000068 	.word	0x20000068

08004534 <__libc_init_array>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	4d0d      	ldr	r5, [pc, #52]	; (800456c <__libc_init_array+0x38>)
 8004538:	4c0d      	ldr	r4, [pc, #52]	; (8004570 <__libc_init_array+0x3c>)
 800453a:	1b64      	subs	r4, r4, r5
 800453c:	10a4      	asrs	r4, r4, #2
 800453e:	2600      	movs	r6, #0
 8004540:	42a6      	cmp	r6, r4
 8004542:	d109      	bne.n	8004558 <__libc_init_array+0x24>
 8004544:	4d0b      	ldr	r5, [pc, #44]	; (8004574 <__libc_init_array+0x40>)
 8004546:	4c0c      	ldr	r4, [pc, #48]	; (8004578 <__libc_init_array+0x44>)
 8004548:	f000 fca8 	bl	8004e9c <_init>
 800454c:	1b64      	subs	r4, r4, r5
 800454e:	10a4      	asrs	r4, r4, #2
 8004550:	2600      	movs	r6, #0
 8004552:	42a6      	cmp	r6, r4
 8004554:	d105      	bne.n	8004562 <__libc_init_array+0x2e>
 8004556:	bd70      	pop	{r4, r5, r6, pc}
 8004558:	f855 3b04 	ldr.w	r3, [r5], #4
 800455c:	4798      	blx	r3
 800455e:	3601      	adds	r6, #1
 8004560:	e7ee      	b.n	8004540 <__libc_init_array+0xc>
 8004562:	f855 3b04 	ldr.w	r3, [r5], #4
 8004566:	4798      	blx	r3
 8004568:	3601      	adds	r6, #1
 800456a:	e7f2      	b.n	8004552 <__libc_init_array+0x1e>
 800456c:	08007b8c 	.word	0x08007b8c
 8004570:	08007b8c 	.word	0x08007b8c
 8004574:	08007b8c 	.word	0x08007b8c
 8004578:	08007b90 	.word	0x08007b90

0800457c <memcpy>:
 800457c:	440a      	add	r2, r1
 800457e:	4291      	cmp	r1, r2
 8004580:	f100 33ff 	add.w	r3, r0, #4294967295
 8004584:	d100      	bne.n	8004588 <memcpy+0xc>
 8004586:	4770      	bx	lr
 8004588:	b510      	push	{r4, lr}
 800458a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800458e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004592:	4291      	cmp	r1, r2
 8004594:	d1f9      	bne.n	800458a <memcpy+0xe>
 8004596:	bd10      	pop	{r4, pc}

08004598 <memset>:
 8004598:	4402      	add	r2, r0
 800459a:	4603      	mov	r3, r0
 800459c:	4293      	cmp	r3, r2
 800459e:	d100      	bne.n	80045a2 <memset+0xa>
 80045a0:	4770      	bx	lr
 80045a2:	f803 1b01 	strb.w	r1, [r3], #1
 80045a6:	e7f9      	b.n	800459c <memset+0x4>

080045a8 <_vsniprintf_r>:
 80045a8:	b530      	push	{r4, r5, lr}
 80045aa:	4614      	mov	r4, r2
 80045ac:	2c00      	cmp	r4, #0
 80045ae:	b09b      	sub	sp, #108	; 0x6c
 80045b0:	4605      	mov	r5, r0
 80045b2:	461a      	mov	r2, r3
 80045b4:	da05      	bge.n	80045c2 <_vsniprintf_r+0x1a>
 80045b6:	238b      	movs	r3, #139	; 0x8b
 80045b8:	6003      	str	r3, [r0, #0]
 80045ba:	f04f 30ff 	mov.w	r0, #4294967295
 80045be:	b01b      	add	sp, #108	; 0x6c
 80045c0:	bd30      	pop	{r4, r5, pc}
 80045c2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80045c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80045ca:	bf14      	ite	ne
 80045cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80045d0:	4623      	moveq	r3, r4
 80045d2:	9302      	str	r3, [sp, #8]
 80045d4:	9305      	str	r3, [sp, #20]
 80045d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045da:	9100      	str	r1, [sp, #0]
 80045dc:	9104      	str	r1, [sp, #16]
 80045de:	f8ad 300e 	strh.w	r3, [sp, #14]
 80045e2:	4669      	mov	r1, sp
 80045e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80045e6:	f000 f90b 	bl	8004800 <_svfiprintf_r>
 80045ea:	1c43      	adds	r3, r0, #1
 80045ec:	bfbc      	itt	lt
 80045ee:	238b      	movlt	r3, #139	; 0x8b
 80045f0:	602b      	strlt	r3, [r5, #0]
 80045f2:	2c00      	cmp	r4, #0
 80045f4:	d0e3      	beq.n	80045be <_vsniprintf_r+0x16>
 80045f6:	9b00      	ldr	r3, [sp, #0]
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
 80045fc:	e7df      	b.n	80045be <_vsniprintf_r+0x16>
	...

08004600 <vsniprintf>:
 8004600:	b507      	push	{r0, r1, r2, lr}
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	460a      	mov	r2, r1
 8004608:	4601      	mov	r1, r0
 800460a:	4803      	ldr	r0, [pc, #12]	; (8004618 <vsniprintf+0x18>)
 800460c:	6800      	ldr	r0, [r0, #0]
 800460e:	f7ff ffcb 	bl	80045a8 <_vsniprintf_r>
 8004612:	b003      	add	sp, #12
 8004614:	f85d fb04 	ldr.w	pc, [sp], #4
 8004618:	20000068 	.word	0x20000068

0800461c <__retarget_lock_acquire_recursive>:
 800461c:	4770      	bx	lr

0800461e <__retarget_lock_release_recursive>:
 800461e:	4770      	bx	lr

08004620 <sbrk_aligned>:
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	4e0e      	ldr	r6, [pc, #56]	; (800465c <sbrk_aligned+0x3c>)
 8004624:	460c      	mov	r4, r1
 8004626:	6831      	ldr	r1, [r6, #0]
 8004628:	4605      	mov	r5, r0
 800462a:	b911      	cbnz	r1, 8004632 <sbrk_aligned+0x12>
 800462c:	f000 fb7c 	bl	8004d28 <_sbrk_r>
 8004630:	6030      	str	r0, [r6, #0]
 8004632:	4621      	mov	r1, r4
 8004634:	4628      	mov	r0, r5
 8004636:	f000 fb77 	bl	8004d28 <_sbrk_r>
 800463a:	1c43      	adds	r3, r0, #1
 800463c:	d00a      	beq.n	8004654 <sbrk_aligned+0x34>
 800463e:	1cc4      	adds	r4, r0, #3
 8004640:	f024 0403 	bic.w	r4, r4, #3
 8004644:	42a0      	cmp	r0, r4
 8004646:	d007      	beq.n	8004658 <sbrk_aligned+0x38>
 8004648:	1a21      	subs	r1, r4, r0
 800464a:	4628      	mov	r0, r5
 800464c:	f000 fb6c 	bl	8004d28 <_sbrk_r>
 8004650:	3001      	adds	r0, #1
 8004652:	d101      	bne.n	8004658 <sbrk_aligned+0x38>
 8004654:	f04f 34ff 	mov.w	r4, #4294967295
 8004658:	4620      	mov	r0, r4
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	200003e4 	.word	0x200003e4

08004660 <_malloc_r>:
 8004660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004664:	1ccd      	adds	r5, r1, #3
 8004666:	f025 0503 	bic.w	r5, r5, #3
 800466a:	3508      	adds	r5, #8
 800466c:	2d0c      	cmp	r5, #12
 800466e:	bf38      	it	cc
 8004670:	250c      	movcc	r5, #12
 8004672:	2d00      	cmp	r5, #0
 8004674:	4607      	mov	r7, r0
 8004676:	db01      	blt.n	800467c <_malloc_r+0x1c>
 8004678:	42a9      	cmp	r1, r5
 800467a:	d905      	bls.n	8004688 <_malloc_r+0x28>
 800467c:	230c      	movs	r3, #12
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	2600      	movs	r6, #0
 8004682:	4630      	mov	r0, r6
 8004684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004688:	4e2e      	ldr	r6, [pc, #184]	; (8004744 <_malloc_r+0xe4>)
 800468a:	f000 fb77 	bl	8004d7c <__malloc_lock>
 800468e:	6833      	ldr	r3, [r6, #0]
 8004690:	461c      	mov	r4, r3
 8004692:	bb34      	cbnz	r4, 80046e2 <_malloc_r+0x82>
 8004694:	4629      	mov	r1, r5
 8004696:	4638      	mov	r0, r7
 8004698:	f7ff ffc2 	bl	8004620 <sbrk_aligned>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	4604      	mov	r4, r0
 80046a0:	d14d      	bne.n	800473e <_malloc_r+0xde>
 80046a2:	6834      	ldr	r4, [r6, #0]
 80046a4:	4626      	mov	r6, r4
 80046a6:	2e00      	cmp	r6, #0
 80046a8:	d140      	bne.n	800472c <_malloc_r+0xcc>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	4631      	mov	r1, r6
 80046ae:	4638      	mov	r0, r7
 80046b0:	eb04 0803 	add.w	r8, r4, r3
 80046b4:	f000 fb38 	bl	8004d28 <_sbrk_r>
 80046b8:	4580      	cmp	r8, r0
 80046ba:	d13a      	bne.n	8004732 <_malloc_r+0xd2>
 80046bc:	6821      	ldr	r1, [r4, #0]
 80046be:	3503      	adds	r5, #3
 80046c0:	1a6d      	subs	r5, r5, r1
 80046c2:	f025 0503 	bic.w	r5, r5, #3
 80046c6:	3508      	adds	r5, #8
 80046c8:	2d0c      	cmp	r5, #12
 80046ca:	bf38      	it	cc
 80046cc:	250c      	movcc	r5, #12
 80046ce:	4629      	mov	r1, r5
 80046d0:	4638      	mov	r0, r7
 80046d2:	f7ff ffa5 	bl	8004620 <sbrk_aligned>
 80046d6:	3001      	adds	r0, #1
 80046d8:	d02b      	beq.n	8004732 <_malloc_r+0xd2>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	442b      	add	r3, r5
 80046de:	6023      	str	r3, [r4, #0]
 80046e0:	e00e      	b.n	8004700 <_malloc_r+0xa0>
 80046e2:	6822      	ldr	r2, [r4, #0]
 80046e4:	1b52      	subs	r2, r2, r5
 80046e6:	d41e      	bmi.n	8004726 <_malloc_r+0xc6>
 80046e8:	2a0b      	cmp	r2, #11
 80046ea:	d916      	bls.n	800471a <_malloc_r+0xba>
 80046ec:	1961      	adds	r1, r4, r5
 80046ee:	42a3      	cmp	r3, r4
 80046f0:	6025      	str	r5, [r4, #0]
 80046f2:	bf18      	it	ne
 80046f4:	6059      	strne	r1, [r3, #4]
 80046f6:	6863      	ldr	r3, [r4, #4]
 80046f8:	bf08      	it	eq
 80046fa:	6031      	streq	r1, [r6, #0]
 80046fc:	5162      	str	r2, [r4, r5]
 80046fe:	604b      	str	r3, [r1, #4]
 8004700:	4638      	mov	r0, r7
 8004702:	f104 060b 	add.w	r6, r4, #11
 8004706:	f000 fb3f 	bl	8004d88 <__malloc_unlock>
 800470a:	f026 0607 	bic.w	r6, r6, #7
 800470e:	1d23      	adds	r3, r4, #4
 8004710:	1af2      	subs	r2, r6, r3
 8004712:	d0b6      	beq.n	8004682 <_malloc_r+0x22>
 8004714:	1b9b      	subs	r3, r3, r6
 8004716:	50a3      	str	r3, [r4, r2]
 8004718:	e7b3      	b.n	8004682 <_malloc_r+0x22>
 800471a:	6862      	ldr	r2, [r4, #4]
 800471c:	42a3      	cmp	r3, r4
 800471e:	bf0c      	ite	eq
 8004720:	6032      	streq	r2, [r6, #0]
 8004722:	605a      	strne	r2, [r3, #4]
 8004724:	e7ec      	b.n	8004700 <_malloc_r+0xa0>
 8004726:	4623      	mov	r3, r4
 8004728:	6864      	ldr	r4, [r4, #4]
 800472a:	e7b2      	b.n	8004692 <_malloc_r+0x32>
 800472c:	4634      	mov	r4, r6
 800472e:	6876      	ldr	r6, [r6, #4]
 8004730:	e7b9      	b.n	80046a6 <_malloc_r+0x46>
 8004732:	230c      	movs	r3, #12
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	4638      	mov	r0, r7
 8004738:	f000 fb26 	bl	8004d88 <__malloc_unlock>
 800473c:	e7a1      	b.n	8004682 <_malloc_r+0x22>
 800473e:	6025      	str	r5, [r4, #0]
 8004740:	e7de      	b.n	8004700 <_malloc_r+0xa0>
 8004742:	bf00      	nop
 8004744:	200003e0 	.word	0x200003e0

08004748 <__ssputs_r>:
 8004748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800474c:	688e      	ldr	r6, [r1, #8]
 800474e:	429e      	cmp	r6, r3
 8004750:	4682      	mov	sl, r0
 8004752:	460c      	mov	r4, r1
 8004754:	4690      	mov	r8, r2
 8004756:	461f      	mov	r7, r3
 8004758:	d838      	bhi.n	80047cc <__ssputs_r+0x84>
 800475a:	898a      	ldrh	r2, [r1, #12]
 800475c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004760:	d032      	beq.n	80047c8 <__ssputs_r+0x80>
 8004762:	6825      	ldr	r5, [r4, #0]
 8004764:	6909      	ldr	r1, [r1, #16]
 8004766:	eba5 0901 	sub.w	r9, r5, r1
 800476a:	6965      	ldr	r5, [r4, #20]
 800476c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004774:	3301      	adds	r3, #1
 8004776:	444b      	add	r3, r9
 8004778:	106d      	asrs	r5, r5, #1
 800477a:	429d      	cmp	r5, r3
 800477c:	bf38      	it	cc
 800477e:	461d      	movcc	r5, r3
 8004780:	0553      	lsls	r3, r2, #21
 8004782:	d531      	bpl.n	80047e8 <__ssputs_r+0xa0>
 8004784:	4629      	mov	r1, r5
 8004786:	f7ff ff6b 	bl	8004660 <_malloc_r>
 800478a:	4606      	mov	r6, r0
 800478c:	b950      	cbnz	r0, 80047a4 <__ssputs_r+0x5c>
 800478e:	230c      	movs	r3, #12
 8004790:	f8ca 3000 	str.w	r3, [sl]
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a4:	6921      	ldr	r1, [r4, #16]
 80047a6:	464a      	mov	r2, r9
 80047a8:	f7ff fee8 	bl	800457c <memcpy>
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	6126      	str	r6, [r4, #16]
 80047ba:	6165      	str	r5, [r4, #20]
 80047bc:	444e      	add	r6, r9
 80047be:	eba5 0509 	sub.w	r5, r5, r9
 80047c2:	6026      	str	r6, [r4, #0]
 80047c4:	60a5      	str	r5, [r4, #8]
 80047c6:	463e      	mov	r6, r7
 80047c8:	42be      	cmp	r6, r7
 80047ca:	d900      	bls.n	80047ce <__ssputs_r+0x86>
 80047cc:	463e      	mov	r6, r7
 80047ce:	6820      	ldr	r0, [r4, #0]
 80047d0:	4632      	mov	r2, r6
 80047d2:	4641      	mov	r1, r8
 80047d4:	f000 fab8 	bl	8004d48 <memmove>
 80047d8:	68a3      	ldr	r3, [r4, #8]
 80047da:	1b9b      	subs	r3, r3, r6
 80047dc:	60a3      	str	r3, [r4, #8]
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	4433      	add	r3, r6
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	2000      	movs	r0, #0
 80047e6:	e7db      	b.n	80047a0 <__ssputs_r+0x58>
 80047e8:	462a      	mov	r2, r5
 80047ea:	f000 fb1f 	bl	8004e2c <_realloc_r>
 80047ee:	4606      	mov	r6, r0
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d1e1      	bne.n	80047b8 <__ssputs_r+0x70>
 80047f4:	6921      	ldr	r1, [r4, #16]
 80047f6:	4650      	mov	r0, sl
 80047f8:	f000 facc 	bl	8004d94 <_free_r>
 80047fc:	e7c7      	b.n	800478e <__ssputs_r+0x46>
	...

08004800 <_svfiprintf_r>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	4698      	mov	r8, r3
 8004806:	898b      	ldrh	r3, [r1, #12]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	b09d      	sub	sp, #116	; 0x74
 800480c:	4607      	mov	r7, r0
 800480e:	460d      	mov	r5, r1
 8004810:	4614      	mov	r4, r2
 8004812:	d50e      	bpl.n	8004832 <_svfiprintf_r+0x32>
 8004814:	690b      	ldr	r3, [r1, #16]
 8004816:	b963      	cbnz	r3, 8004832 <_svfiprintf_r+0x32>
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	f7ff ff21 	bl	8004660 <_malloc_r>
 800481e:	6028      	str	r0, [r5, #0]
 8004820:	6128      	str	r0, [r5, #16]
 8004822:	b920      	cbnz	r0, 800482e <_svfiprintf_r+0x2e>
 8004824:	230c      	movs	r3, #12
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	e0d1      	b.n	80049d2 <_svfiprintf_r+0x1d2>
 800482e:	2340      	movs	r3, #64	; 0x40
 8004830:	616b      	str	r3, [r5, #20]
 8004832:	2300      	movs	r3, #0
 8004834:	9309      	str	r3, [sp, #36]	; 0x24
 8004836:	2320      	movs	r3, #32
 8004838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800483c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004840:	2330      	movs	r3, #48	; 0x30
 8004842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049ec <_svfiprintf_r+0x1ec>
 8004846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800484a:	f04f 0901 	mov.w	r9, #1
 800484e:	4623      	mov	r3, r4
 8004850:	469a      	mov	sl, r3
 8004852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004856:	b10a      	cbz	r2, 800485c <_svfiprintf_r+0x5c>
 8004858:	2a25      	cmp	r2, #37	; 0x25
 800485a:	d1f9      	bne.n	8004850 <_svfiprintf_r+0x50>
 800485c:	ebba 0b04 	subs.w	fp, sl, r4
 8004860:	d00b      	beq.n	800487a <_svfiprintf_r+0x7a>
 8004862:	465b      	mov	r3, fp
 8004864:	4622      	mov	r2, r4
 8004866:	4629      	mov	r1, r5
 8004868:	4638      	mov	r0, r7
 800486a:	f7ff ff6d 	bl	8004748 <__ssputs_r>
 800486e:	3001      	adds	r0, #1
 8004870:	f000 80aa 	beq.w	80049c8 <_svfiprintf_r+0x1c8>
 8004874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004876:	445a      	add	r2, fp
 8004878:	9209      	str	r2, [sp, #36]	; 0x24
 800487a:	f89a 3000 	ldrb.w	r3, [sl]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 80a2 	beq.w	80049c8 <_svfiprintf_r+0x1c8>
 8004884:	2300      	movs	r3, #0
 8004886:	f04f 32ff 	mov.w	r2, #4294967295
 800488a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800488e:	f10a 0a01 	add.w	sl, sl, #1
 8004892:	9304      	str	r3, [sp, #16]
 8004894:	9307      	str	r3, [sp, #28]
 8004896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800489a:	931a      	str	r3, [sp, #104]	; 0x68
 800489c:	4654      	mov	r4, sl
 800489e:	2205      	movs	r2, #5
 80048a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a4:	4851      	ldr	r0, [pc, #324]	; (80049ec <_svfiprintf_r+0x1ec>)
 80048a6:	f7fb fca3 	bl	80001f0 <memchr>
 80048aa:	9a04      	ldr	r2, [sp, #16]
 80048ac:	b9d8      	cbnz	r0, 80048e6 <_svfiprintf_r+0xe6>
 80048ae:	06d0      	lsls	r0, r2, #27
 80048b0:	bf44      	itt	mi
 80048b2:	2320      	movmi	r3, #32
 80048b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048b8:	0711      	lsls	r1, r2, #28
 80048ba:	bf44      	itt	mi
 80048bc:	232b      	movmi	r3, #43	; 0x2b
 80048be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048c2:	f89a 3000 	ldrb.w	r3, [sl]
 80048c6:	2b2a      	cmp	r3, #42	; 0x2a
 80048c8:	d015      	beq.n	80048f6 <_svfiprintf_r+0xf6>
 80048ca:	9a07      	ldr	r2, [sp, #28]
 80048cc:	4654      	mov	r4, sl
 80048ce:	2000      	movs	r0, #0
 80048d0:	f04f 0c0a 	mov.w	ip, #10
 80048d4:	4621      	mov	r1, r4
 80048d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048da:	3b30      	subs	r3, #48	; 0x30
 80048dc:	2b09      	cmp	r3, #9
 80048de:	d94e      	bls.n	800497e <_svfiprintf_r+0x17e>
 80048e0:	b1b0      	cbz	r0, 8004910 <_svfiprintf_r+0x110>
 80048e2:	9207      	str	r2, [sp, #28]
 80048e4:	e014      	b.n	8004910 <_svfiprintf_r+0x110>
 80048e6:	eba0 0308 	sub.w	r3, r0, r8
 80048ea:	fa09 f303 	lsl.w	r3, r9, r3
 80048ee:	4313      	orrs	r3, r2
 80048f0:	9304      	str	r3, [sp, #16]
 80048f2:	46a2      	mov	sl, r4
 80048f4:	e7d2      	b.n	800489c <_svfiprintf_r+0x9c>
 80048f6:	9b03      	ldr	r3, [sp, #12]
 80048f8:	1d19      	adds	r1, r3, #4
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	9103      	str	r1, [sp, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bfbb      	ittet	lt
 8004902:	425b      	neglt	r3, r3
 8004904:	f042 0202 	orrlt.w	r2, r2, #2
 8004908:	9307      	strge	r3, [sp, #28]
 800490a:	9307      	strlt	r3, [sp, #28]
 800490c:	bfb8      	it	lt
 800490e:	9204      	strlt	r2, [sp, #16]
 8004910:	7823      	ldrb	r3, [r4, #0]
 8004912:	2b2e      	cmp	r3, #46	; 0x2e
 8004914:	d10c      	bne.n	8004930 <_svfiprintf_r+0x130>
 8004916:	7863      	ldrb	r3, [r4, #1]
 8004918:	2b2a      	cmp	r3, #42	; 0x2a
 800491a:	d135      	bne.n	8004988 <_svfiprintf_r+0x188>
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	1d1a      	adds	r2, r3, #4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	9203      	str	r2, [sp, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	bfb8      	it	lt
 8004928:	f04f 33ff 	movlt.w	r3, #4294967295
 800492c:	3402      	adds	r4, #2
 800492e:	9305      	str	r3, [sp, #20]
 8004930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049fc <_svfiprintf_r+0x1fc>
 8004934:	7821      	ldrb	r1, [r4, #0]
 8004936:	2203      	movs	r2, #3
 8004938:	4650      	mov	r0, sl
 800493a:	f7fb fc59 	bl	80001f0 <memchr>
 800493e:	b140      	cbz	r0, 8004952 <_svfiprintf_r+0x152>
 8004940:	2340      	movs	r3, #64	; 0x40
 8004942:	eba0 000a 	sub.w	r0, r0, sl
 8004946:	fa03 f000 	lsl.w	r0, r3, r0
 800494a:	9b04      	ldr	r3, [sp, #16]
 800494c:	4303      	orrs	r3, r0
 800494e:	3401      	adds	r4, #1
 8004950:	9304      	str	r3, [sp, #16]
 8004952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004956:	4826      	ldr	r0, [pc, #152]	; (80049f0 <_svfiprintf_r+0x1f0>)
 8004958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800495c:	2206      	movs	r2, #6
 800495e:	f7fb fc47 	bl	80001f0 <memchr>
 8004962:	2800      	cmp	r0, #0
 8004964:	d038      	beq.n	80049d8 <_svfiprintf_r+0x1d8>
 8004966:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <_svfiprintf_r+0x1f4>)
 8004968:	bb1b      	cbnz	r3, 80049b2 <_svfiprintf_r+0x1b2>
 800496a:	9b03      	ldr	r3, [sp, #12]
 800496c:	3307      	adds	r3, #7
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	3308      	adds	r3, #8
 8004974:	9303      	str	r3, [sp, #12]
 8004976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004978:	4433      	add	r3, r6
 800497a:	9309      	str	r3, [sp, #36]	; 0x24
 800497c:	e767      	b.n	800484e <_svfiprintf_r+0x4e>
 800497e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004982:	460c      	mov	r4, r1
 8004984:	2001      	movs	r0, #1
 8004986:	e7a5      	b.n	80048d4 <_svfiprintf_r+0xd4>
 8004988:	2300      	movs	r3, #0
 800498a:	3401      	adds	r4, #1
 800498c:	9305      	str	r3, [sp, #20]
 800498e:	4619      	mov	r1, r3
 8004990:	f04f 0c0a 	mov.w	ip, #10
 8004994:	4620      	mov	r0, r4
 8004996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800499a:	3a30      	subs	r2, #48	; 0x30
 800499c:	2a09      	cmp	r2, #9
 800499e:	d903      	bls.n	80049a8 <_svfiprintf_r+0x1a8>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0c5      	beq.n	8004930 <_svfiprintf_r+0x130>
 80049a4:	9105      	str	r1, [sp, #20]
 80049a6:	e7c3      	b.n	8004930 <_svfiprintf_r+0x130>
 80049a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ac:	4604      	mov	r4, r0
 80049ae:	2301      	movs	r3, #1
 80049b0:	e7f0      	b.n	8004994 <_svfiprintf_r+0x194>
 80049b2:	ab03      	add	r3, sp, #12
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	462a      	mov	r2, r5
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <_svfiprintf_r+0x1f8>)
 80049ba:	a904      	add	r1, sp, #16
 80049bc:	4638      	mov	r0, r7
 80049be:	f3af 8000 	nop.w
 80049c2:	1c42      	adds	r2, r0, #1
 80049c4:	4606      	mov	r6, r0
 80049c6:	d1d6      	bne.n	8004976 <_svfiprintf_r+0x176>
 80049c8:	89ab      	ldrh	r3, [r5, #12]
 80049ca:	065b      	lsls	r3, r3, #25
 80049cc:	f53f af2c 	bmi.w	8004828 <_svfiprintf_r+0x28>
 80049d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049d2:	b01d      	add	sp, #116	; 0x74
 80049d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d8:	ab03      	add	r3, sp, #12
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	462a      	mov	r2, r5
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <_svfiprintf_r+0x1f8>)
 80049e0:	a904      	add	r1, sp, #16
 80049e2:	4638      	mov	r0, r7
 80049e4:	f000 f87a 	bl	8004adc <_printf_i>
 80049e8:	e7eb      	b.n	80049c2 <_svfiprintf_r+0x1c2>
 80049ea:	bf00      	nop
 80049ec:	08007b50 	.word	0x08007b50
 80049f0:	08007b5a 	.word	0x08007b5a
 80049f4:	00000000 	.word	0x00000000
 80049f8:	08004749 	.word	0x08004749
 80049fc:	08007b56 	.word	0x08007b56

08004a00 <_printf_common>:
 8004a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a04:	4616      	mov	r6, r2
 8004a06:	4699      	mov	r9, r3
 8004a08:	688a      	ldr	r2, [r1, #8]
 8004a0a:	690b      	ldr	r3, [r1, #16]
 8004a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a10:	4293      	cmp	r3, r2
 8004a12:	bfb8      	it	lt
 8004a14:	4613      	movlt	r3, r2
 8004a16:	6033      	str	r3, [r6, #0]
 8004a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a1c:	4607      	mov	r7, r0
 8004a1e:	460c      	mov	r4, r1
 8004a20:	b10a      	cbz	r2, 8004a26 <_printf_common+0x26>
 8004a22:	3301      	adds	r3, #1
 8004a24:	6033      	str	r3, [r6, #0]
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	0699      	lsls	r1, r3, #26
 8004a2a:	bf42      	ittt	mi
 8004a2c:	6833      	ldrmi	r3, [r6, #0]
 8004a2e:	3302      	addmi	r3, #2
 8004a30:	6033      	strmi	r3, [r6, #0]
 8004a32:	6825      	ldr	r5, [r4, #0]
 8004a34:	f015 0506 	ands.w	r5, r5, #6
 8004a38:	d106      	bne.n	8004a48 <_printf_common+0x48>
 8004a3a:	f104 0a19 	add.w	sl, r4, #25
 8004a3e:	68e3      	ldr	r3, [r4, #12]
 8004a40:	6832      	ldr	r2, [r6, #0]
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	42ab      	cmp	r3, r5
 8004a46:	dc26      	bgt.n	8004a96 <_printf_common+0x96>
 8004a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a4c:	1e13      	subs	r3, r2, #0
 8004a4e:	6822      	ldr	r2, [r4, #0]
 8004a50:	bf18      	it	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	0692      	lsls	r2, r2, #26
 8004a56:	d42b      	bmi.n	8004ab0 <_printf_common+0xb0>
 8004a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	4638      	mov	r0, r7
 8004a60:	47c0      	blx	r8
 8004a62:	3001      	adds	r0, #1
 8004a64:	d01e      	beq.n	8004aa4 <_printf_common+0xa4>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	68e5      	ldr	r5, [r4, #12]
 8004a6a:	6832      	ldr	r2, [r6, #0]
 8004a6c:	f003 0306 	and.w	r3, r3, #6
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	bf08      	it	eq
 8004a74:	1aad      	subeq	r5, r5, r2
 8004a76:	68a3      	ldr	r3, [r4, #8]
 8004a78:	6922      	ldr	r2, [r4, #16]
 8004a7a:	bf0c      	ite	eq
 8004a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a80:	2500      	movne	r5, #0
 8004a82:	4293      	cmp	r3, r2
 8004a84:	bfc4      	itt	gt
 8004a86:	1a9b      	subgt	r3, r3, r2
 8004a88:	18ed      	addgt	r5, r5, r3
 8004a8a:	2600      	movs	r6, #0
 8004a8c:	341a      	adds	r4, #26
 8004a8e:	42b5      	cmp	r5, r6
 8004a90:	d11a      	bne.n	8004ac8 <_printf_common+0xc8>
 8004a92:	2000      	movs	r0, #0
 8004a94:	e008      	b.n	8004aa8 <_printf_common+0xa8>
 8004a96:	2301      	movs	r3, #1
 8004a98:	4652      	mov	r2, sl
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	47c0      	blx	r8
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d103      	bne.n	8004aac <_printf_common+0xac>
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aac:	3501      	adds	r5, #1
 8004aae:	e7c6      	b.n	8004a3e <_printf_common+0x3e>
 8004ab0:	18e1      	adds	r1, r4, r3
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	2030      	movs	r0, #48	; 0x30
 8004ab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aba:	4422      	add	r2, r4
 8004abc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	e7c7      	b.n	8004a58 <_printf_common+0x58>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	4622      	mov	r2, r4
 8004acc:	4649      	mov	r1, r9
 8004ace:	4638      	mov	r0, r7
 8004ad0:	47c0      	blx	r8
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d0e6      	beq.n	8004aa4 <_printf_common+0xa4>
 8004ad6:	3601      	adds	r6, #1
 8004ad8:	e7d9      	b.n	8004a8e <_printf_common+0x8e>
	...

08004adc <_printf_i>:
 8004adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	7e0f      	ldrb	r7, [r1, #24]
 8004ae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ae4:	2f78      	cmp	r7, #120	; 0x78
 8004ae6:	4691      	mov	r9, r2
 8004ae8:	4680      	mov	r8, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	469a      	mov	sl, r3
 8004aee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004af2:	d807      	bhi.n	8004b04 <_printf_i+0x28>
 8004af4:	2f62      	cmp	r7, #98	; 0x62
 8004af6:	d80a      	bhi.n	8004b0e <_printf_i+0x32>
 8004af8:	2f00      	cmp	r7, #0
 8004afa:	f000 80d8 	beq.w	8004cae <_printf_i+0x1d2>
 8004afe:	2f58      	cmp	r7, #88	; 0x58
 8004b00:	f000 80a3 	beq.w	8004c4a <_printf_i+0x16e>
 8004b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b0c:	e03a      	b.n	8004b84 <_printf_i+0xa8>
 8004b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b12:	2b15      	cmp	r3, #21
 8004b14:	d8f6      	bhi.n	8004b04 <_printf_i+0x28>
 8004b16:	a101      	add	r1, pc, #4	; (adr r1, 8004b1c <_printf_i+0x40>)
 8004b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b1c:	08004b75 	.word	0x08004b75
 8004b20:	08004b89 	.word	0x08004b89
 8004b24:	08004b05 	.word	0x08004b05
 8004b28:	08004b05 	.word	0x08004b05
 8004b2c:	08004b05 	.word	0x08004b05
 8004b30:	08004b05 	.word	0x08004b05
 8004b34:	08004b89 	.word	0x08004b89
 8004b38:	08004b05 	.word	0x08004b05
 8004b3c:	08004b05 	.word	0x08004b05
 8004b40:	08004b05 	.word	0x08004b05
 8004b44:	08004b05 	.word	0x08004b05
 8004b48:	08004c95 	.word	0x08004c95
 8004b4c:	08004bb9 	.word	0x08004bb9
 8004b50:	08004c77 	.word	0x08004c77
 8004b54:	08004b05 	.word	0x08004b05
 8004b58:	08004b05 	.word	0x08004b05
 8004b5c:	08004cb7 	.word	0x08004cb7
 8004b60:	08004b05 	.word	0x08004b05
 8004b64:	08004bb9 	.word	0x08004bb9
 8004b68:	08004b05 	.word	0x08004b05
 8004b6c:	08004b05 	.word	0x08004b05
 8004b70:	08004c7f 	.word	0x08004c7f
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	1d1a      	adds	r2, r3, #4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	602a      	str	r2, [r5, #0]
 8004b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0a3      	b.n	8004cd0 <_printf_i+0x1f4>
 8004b88:	6820      	ldr	r0, [r4, #0]
 8004b8a:	6829      	ldr	r1, [r5, #0]
 8004b8c:	0606      	lsls	r6, r0, #24
 8004b8e:	f101 0304 	add.w	r3, r1, #4
 8004b92:	d50a      	bpl.n	8004baa <_printf_i+0xce>
 8004b94:	680e      	ldr	r6, [r1, #0]
 8004b96:	602b      	str	r3, [r5, #0]
 8004b98:	2e00      	cmp	r6, #0
 8004b9a:	da03      	bge.n	8004ba4 <_printf_i+0xc8>
 8004b9c:	232d      	movs	r3, #45	; 0x2d
 8004b9e:	4276      	negs	r6, r6
 8004ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba4:	485e      	ldr	r0, [pc, #376]	; (8004d20 <_printf_i+0x244>)
 8004ba6:	230a      	movs	r3, #10
 8004ba8:	e019      	b.n	8004bde <_printf_i+0x102>
 8004baa:	680e      	ldr	r6, [r1, #0]
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bb2:	bf18      	it	ne
 8004bb4:	b236      	sxthne	r6, r6
 8004bb6:	e7ef      	b.n	8004b98 <_printf_i+0xbc>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	6820      	ldr	r0, [r4, #0]
 8004bbc:	1d19      	adds	r1, r3, #4
 8004bbe:	6029      	str	r1, [r5, #0]
 8004bc0:	0601      	lsls	r1, r0, #24
 8004bc2:	d501      	bpl.n	8004bc8 <_printf_i+0xec>
 8004bc4:	681e      	ldr	r6, [r3, #0]
 8004bc6:	e002      	b.n	8004bce <_printf_i+0xf2>
 8004bc8:	0646      	lsls	r6, r0, #25
 8004bca:	d5fb      	bpl.n	8004bc4 <_printf_i+0xe8>
 8004bcc:	881e      	ldrh	r6, [r3, #0]
 8004bce:	4854      	ldr	r0, [pc, #336]	; (8004d20 <_printf_i+0x244>)
 8004bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2308      	moveq	r3, #8
 8004bd6:	230a      	movne	r3, #10
 8004bd8:	2100      	movs	r1, #0
 8004bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bde:	6865      	ldr	r5, [r4, #4]
 8004be0:	60a5      	str	r5, [r4, #8]
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	bfa2      	ittt	ge
 8004be6:	6821      	ldrge	r1, [r4, #0]
 8004be8:	f021 0104 	bicge.w	r1, r1, #4
 8004bec:	6021      	strge	r1, [r4, #0]
 8004bee:	b90e      	cbnz	r6, 8004bf4 <_printf_i+0x118>
 8004bf0:	2d00      	cmp	r5, #0
 8004bf2:	d04d      	beq.n	8004c90 <_printf_i+0x1b4>
 8004bf4:	4615      	mov	r5, r2
 8004bf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bfa:	fb03 6711 	mls	r7, r3, r1, r6
 8004bfe:	5dc7      	ldrb	r7, [r0, r7]
 8004c00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c04:	4637      	mov	r7, r6
 8004c06:	42bb      	cmp	r3, r7
 8004c08:	460e      	mov	r6, r1
 8004c0a:	d9f4      	bls.n	8004bf6 <_printf_i+0x11a>
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d10b      	bne.n	8004c28 <_printf_i+0x14c>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	07de      	lsls	r6, r3, #31
 8004c14:	d508      	bpl.n	8004c28 <_printf_i+0x14c>
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	6861      	ldr	r1, [r4, #4]
 8004c1a:	4299      	cmp	r1, r3
 8004c1c:	bfde      	ittt	le
 8004c1e:	2330      	movle	r3, #48	; 0x30
 8004c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c28:	1b52      	subs	r2, r2, r5
 8004c2a:	6122      	str	r2, [r4, #16]
 8004c2c:	f8cd a000 	str.w	sl, [sp]
 8004c30:	464b      	mov	r3, r9
 8004c32:	aa03      	add	r2, sp, #12
 8004c34:	4621      	mov	r1, r4
 8004c36:	4640      	mov	r0, r8
 8004c38:	f7ff fee2 	bl	8004a00 <_printf_common>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d14c      	bne.n	8004cda <_printf_i+0x1fe>
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	b004      	add	sp, #16
 8004c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4a:	4835      	ldr	r0, [pc, #212]	; (8004d20 <_printf_i+0x244>)
 8004c4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c50:	6829      	ldr	r1, [r5, #0]
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c58:	6029      	str	r1, [r5, #0]
 8004c5a:	061d      	lsls	r5, r3, #24
 8004c5c:	d514      	bpl.n	8004c88 <_printf_i+0x1ac>
 8004c5e:	07df      	lsls	r7, r3, #31
 8004c60:	bf44      	itt	mi
 8004c62:	f043 0320 	orrmi.w	r3, r3, #32
 8004c66:	6023      	strmi	r3, [r4, #0]
 8004c68:	b91e      	cbnz	r6, 8004c72 <_printf_i+0x196>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	f023 0320 	bic.w	r3, r3, #32
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	2310      	movs	r3, #16
 8004c74:	e7b0      	b.n	8004bd8 <_printf_i+0xfc>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	f043 0320 	orr.w	r3, r3, #32
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	2378      	movs	r3, #120	; 0x78
 8004c80:	4828      	ldr	r0, [pc, #160]	; (8004d24 <_printf_i+0x248>)
 8004c82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c86:	e7e3      	b.n	8004c50 <_printf_i+0x174>
 8004c88:	0659      	lsls	r1, r3, #25
 8004c8a:	bf48      	it	mi
 8004c8c:	b2b6      	uxthmi	r6, r6
 8004c8e:	e7e6      	b.n	8004c5e <_printf_i+0x182>
 8004c90:	4615      	mov	r5, r2
 8004c92:	e7bb      	b.n	8004c0c <_printf_i+0x130>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	6826      	ldr	r6, [r4, #0]
 8004c98:	6961      	ldr	r1, [r4, #20]
 8004c9a:	1d18      	adds	r0, r3, #4
 8004c9c:	6028      	str	r0, [r5, #0]
 8004c9e:	0635      	lsls	r5, r6, #24
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	d501      	bpl.n	8004ca8 <_printf_i+0x1cc>
 8004ca4:	6019      	str	r1, [r3, #0]
 8004ca6:	e002      	b.n	8004cae <_printf_i+0x1d2>
 8004ca8:	0670      	lsls	r0, r6, #25
 8004caa:	d5fb      	bpl.n	8004ca4 <_printf_i+0x1c8>
 8004cac:	8019      	strh	r1, [r3, #0]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	6123      	str	r3, [r4, #16]
 8004cb2:	4615      	mov	r5, r2
 8004cb4:	e7ba      	b.n	8004c2c <_printf_i+0x150>
 8004cb6:	682b      	ldr	r3, [r5, #0]
 8004cb8:	1d1a      	adds	r2, r3, #4
 8004cba:	602a      	str	r2, [r5, #0]
 8004cbc:	681d      	ldr	r5, [r3, #0]
 8004cbe:	6862      	ldr	r2, [r4, #4]
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f7fb fa94 	bl	80001f0 <memchr>
 8004cc8:	b108      	cbz	r0, 8004cce <_printf_i+0x1f2>
 8004cca:	1b40      	subs	r0, r0, r5
 8004ccc:	6060      	str	r0, [r4, #4]
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	6123      	str	r3, [r4, #16]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd8:	e7a8      	b.n	8004c2c <_printf_i+0x150>
 8004cda:	6923      	ldr	r3, [r4, #16]
 8004cdc:	462a      	mov	r2, r5
 8004cde:	4649      	mov	r1, r9
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	47d0      	blx	sl
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d0ab      	beq.n	8004c40 <_printf_i+0x164>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	079b      	lsls	r3, r3, #30
 8004cec:	d413      	bmi.n	8004d16 <_printf_i+0x23a>
 8004cee:	68e0      	ldr	r0, [r4, #12]
 8004cf0:	9b03      	ldr	r3, [sp, #12]
 8004cf2:	4298      	cmp	r0, r3
 8004cf4:	bfb8      	it	lt
 8004cf6:	4618      	movlt	r0, r3
 8004cf8:	e7a4      	b.n	8004c44 <_printf_i+0x168>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	4649      	mov	r1, r9
 8004d00:	4640      	mov	r0, r8
 8004d02:	47d0      	blx	sl
 8004d04:	3001      	adds	r0, #1
 8004d06:	d09b      	beq.n	8004c40 <_printf_i+0x164>
 8004d08:	3501      	adds	r5, #1
 8004d0a:	68e3      	ldr	r3, [r4, #12]
 8004d0c:	9903      	ldr	r1, [sp, #12]
 8004d0e:	1a5b      	subs	r3, r3, r1
 8004d10:	42ab      	cmp	r3, r5
 8004d12:	dcf2      	bgt.n	8004cfa <_printf_i+0x21e>
 8004d14:	e7eb      	b.n	8004cee <_printf_i+0x212>
 8004d16:	2500      	movs	r5, #0
 8004d18:	f104 0619 	add.w	r6, r4, #25
 8004d1c:	e7f5      	b.n	8004d0a <_printf_i+0x22e>
 8004d1e:	bf00      	nop
 8004d20:	08007b61 	.word	0x08007b61
 8004d24:	08007b72 	.word	0x08007b72

08004d28 <_sbrk_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4d06      	ldr	r5, [pc, #24]	; (8004d44 <_sbrk_r+0x1c>)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4608      	mov	r0, r1
 8004d32:	602b      	str	r3, [r5, #0]
 8004d34:	f7fc ff06 	bl	8001b44 <_sbrk>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d102      	bne.n	8004d42 <_sbrk_r+0x1a>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	b103      	cbz	r3, 8004d42 <_sbrk_r+0x1a>
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	200003e8 	.word	0x200003e8

08004d48 <memmove>:
 8004d48:	4288      	cmp	r0, r1
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	eb01 0402 	add.w	r4, r1, r2
 8004d50:	d902      	bls.n	8004d58 <memmove+0x10>
 8004d52:	4284      	cmp	r4, r0
 8004d54:	4623      	mov	r3, r4
 8004d56:	d807      	bhi.n	8004d68 <memmove+0x20>
 8004d58:	1e43      	subs	r3, r0, #1
 8004d5a:	42a1      	cmp	r1, r4
 8004d5c:	d008      	beq.n	8004d70 <memmove+0x28>
 8004d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d66:	e7f8      	b.n	8004d5a <memmove+0x12>
 8004d68:	4402      	add	r2, r0
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	428a      	cmp	r2, r1
 8004d6e:	d100      	bne.n	8004d72 <memmove+0x2a>
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d7a:	e7f7      	b.n	8004d6c <memmove+0x24>

08004d7c <__malloc_lock>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	; (8004d84 <__malloc_lock+0x8>)
 8004d7e:	f7ff bc4d 	b.w	800461c <__retarget_lock_acquire_recursive>
 8004d82:	bf00      	nop
 8004d84:	200003dc 	.word	0x200003dc

08004d88 <__malloc_unlock>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__malloc_unlock+0x8>)
 8004d8a:	f7ff bc48 	b.w	800461e <__retarget_lock_release_recursive>
 8004d8e:	bf00      	nop
 8004d90:	200003dc 	.word	0x200003dc

08004d94 <_free_r>:
 8004d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d96:	2900      	cmp	r1, #0
 8004d98:	d044      	beq.n	8004e24 <_free_r+0x90>
 8004d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d9e:	9001      	str	r0, [sp, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f1a1 0404 	sub.w	r4, r1, #4
 8004da6:	bfb8      	it	lt
 8004da8:	18e4      	addlt	r4, r4, r3
 8004daa:	f7ff ffe7 	bl	8004d7c <__malloc_lock>
 8004dae:	4a1e      	ldr	r2, [pc, #120]	; (8004e28 <_free_r+0x94>)
 8004db0:	9801      	ldr	r0, [sp, #4]
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	b933      	cbnz	r3, 8004dc4 <_free_r+0x30>
 8004db6:	6063      	str	r3, [r4, #4]
 8004db8:	6014      	str	r4, [r2, #0]
 8004dba:	b003      	add	sp, #12
 8004dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dc0:	f7ff bfe2 	b.w	8004d88 <__malloc_unlock>
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	d908      	bls.n	8004dda <_free_r+0x46>
 8004dc8:	6825      	ldr	r5, [r4, #0]
 8004dca:	1961      	adds	r1, r4, r5
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	bf01      	itttt	eq
 8004dd0:	6819      	ldreq	r1, [r3, #0]
 8004dd2:	685b      	ldreq	r3, [r3, #4]
 8004dd4:	1949      	addeq	r1, r1, r5
 8004dd6:	6021      	streq	r1, [r4, #0]
 8004dd8:	e7ed      	b.n	8004db6 <_free_r+0x22>
 8004dda:	461a      	mov	r2, r3
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	b10b      	cbz	r3, 8004de4 <_free_r+0x50>
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	d9fa      	bls.n	8004dda <_free_r+0x46>
 8004de4:	6811      	ldr	r1, [r2, #0]
 8004de6:	1855      	adds	r5, r2, r1
 8004de8:	42a5      	cmp	r5, r4
 8004dea:	d10b      	bne.n	8004e04 <_free_r+0x70>
 8004dec:	6824      	ldr	r4, [r4, #0]
 8004dee:	4421      	add	r1, r4
 8004df0:	1854      	adds	r4, r2, r1
 8004df2:	42a3      	cmp	r3, r4
 8004df4:	6011      	str	r1, [r2, #0]
 8004df6:	d1e0      	bne.n	8004dba <_free_r+0x26>
 8004df8:	681c      	ldr	r4, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	6053      	str	r3, [r2, #4]
 8004dfe:	4421      	add	r1, r4
 8004e00:	6011      	str	r1, [r2, #0]
 8004e02:	e7da      	b.n	8004dba <_free_r+0x26>
 8004e04:	d902      	bls.n	8004e0c <_free_r+0x78>
 8004e06:	230c      	movs	r3, #12
 8004e08:	6003      	str	r3, [r0, #0]
 8004e0a:	e7d6      	b.n	8004dba <_free_r+0x26>
 8004e0c:	6825      	ldr	r5, [r4, #0]
 8004e0e:	1961      	adds	r1, r4, r5
 8004e10:	428b      	cmp	r3, r1
 8004e12:	bf04      	itt	eq
 8004e14:	6819      	ldreq	r1, [r3, #0]
 8004e16:	685b      	ldreq	r3, [r3, #4]
 8004e18:	6063      	str	r3, [r4, #4]
 8004e1a:	bf04      	itt	eq
 8004e1c:	1949      	addeq	r1, r1, r5
 8004e1e:	6021      	streq	r1, [r4, #0]
 8004e20:	6054      	str	r4, [r2, #4]
 8004e22:	e7ca      	b.n	8004dba <_free_r+0x26>
 8004e24:	b003      	add	sp, #12
 8004e26:	bd30      	pop	{r4, r5, pc}
 8004e28:	200003e0 	.word	0x200003e0

08004e2c <_realloc_r>:
 8004e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e30:	4680      	mov	r8, r0
 8004e32:	4614      	mov	r4, r2
 8004e34:	460e      	mov	r6, r1
 8004e36:	b921      	cbnz	r1, 8004e42 <_realloc_r+0x16>
 8004e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	f7ff bc0f 	b.w	8004660 <_malloc_r>
 8004e42:	b92a      	cbnz	r2, 8004e50 <_realloc_r+0x24>
 8004e44:	f7ff ffa6 	bl	8004d94 <_free_r>
 8004e48:	4625      	mov	r5, r4
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e50:	f000 f81b 	bl	8004e8a <_malloc_usable_size_r>
 8004e54:	4284      	cmp	r4, r0
 8004e56:	4607      	mov	r7, r0
 8004e58:	d802      	bhi.n	8004e60 <_realloc_r+0x34>
 8004e5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e5e:	d812      	bhi.n	8004e86 <_realloc_r+0x5a>
 8004e60:	4621      	mov	r1, r4
 8004e62:	4640      	mov	r0, r8
 8004e64:	f7ff fbfc 	bl	8004660 <_malloc_r>
 8004e68:	4605      	mov	r5, r0
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d0ed      	beq.n	8004e4a <_realloc_r+0x1e>
 8004e6e:	42bc      	cmp	r4, r7
 8004e70:	4622      	mov	r2, r4
 8004e72:	4631      	mov	r1, r6
 8004e74:	bf28      	it	cs
 8004e76:	463a      	movcs	r2, r7
 8004e78:	f7ff fb80 	bl	800457c <memcpy>
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4640      	mov	r0, r8
 8004e80:	f7ff ff88 	bl	8004d94 <_free_r>
 8004e84:	e7e1      	b.n	8004e4a <_realloc_r+0x1e>
 8004e86:	4635      	mov	r5, r6
 8004e88:	e7df      	b.n	8004e4a <_realloc_r+0x1e>

08004e8a <_malloc_usable_size_r>:
 8004e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e8e:	1f18      	subs	r0, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bfbc      	itt	lt
 8004e94:	580b      	ldrlt	r3, [r1, r0]
 8004e96:	18c0      	addlt	r0, r0, r3
 8004e98:	4770      	bx	lr
	...

08004e9c <_init>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	bf00      	nop
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr

08004ea8 <_fini>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr
